<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Controllers;

use OpenShiftAPIWithKubernetesLib\APIException;
use OpenShiftAPIWithKubernetesLib\APIHelper;
use OpenShiftAPIWithKubernetesLib\Configuration;
use OpenShiftAPIWithKubernetesLib\Models;
use OpenShiftAPIWithKubernetesLib\Exceptions;
use OpenShiftAPIWithKubernetesLib\Http\HttpRequest;
use OpenShiftAPIWithKubernetesLib\Http\HttpResponse;
use OpenShiftAPIWithKubernetesLib\Http\HttpMethod;
use OpenShiftAPIWithKubernetesLib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class NetworkOpenshiftIoV1Controller extends BaseController
{
    /**
     * @var NetworkOpenshiftIoV1Controller The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return NetworkOpenshiftIoV1Controller The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * get available resources
     *
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getNetworkOpenshiftIoV1APIResources()
    {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1APIResourceList');
    }

    /**
     * list or watch objects of kind ClusterNetwork
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNetworkOpenshiftIoV1ClusterNetwork(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetworkList');
    }

    /**
     * create a ClusterNetwork
     *
     * @param Models\V1ClusterNetwork $body   TODO: type description here
     * @param string                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNetworkOpenshiftIoV1ClusterNetwork(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * delete collection of ClusterNetwork
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1CollectionClusterNetwork(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified ClusterNetwork
     *
     * @param string $name   name of the ClusterNetwork
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNetworkOpenshiftIoV1ClusterNetwork(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * replace the specified ClusterNetwork
     *
     * @param Models\V1ClusterNetwork $body   TODO: type description here
     * @param string                  $name   name of the ClusterNetwork
     * @param string                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNetworkOpenshiftIoV1ClusterNetwork(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * delete a ClusterNetwork
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ClusterNetwork
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1ClusterNetwork(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ClusterNetwork
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterNetwork
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNetworkOpenshiftIoV1ClusterNetwork(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * list or watch objects of kind EgressNetworkPolicy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/egressnetworkpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicyList');
    }

    /**
     * create an EgressNetworkPolicy
     *
     * @param Models\V1EgressNetworkPolicy $body   TODO: type description here
     * @param string                       $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/egressnetworkpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * list or watch objects of kind HostSubnet
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNetworkOpenshiftIoV1HostSubnet(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnetList');
    }

    /**
     * create a HostSubnet
     *
     * @param Models\V1HostSubnet $body   TODO: type description here
     * @param string              $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNetworkOpenshiftIoV1HostSubnet(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * delete collection of HostSubnet
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1CollectionHostSubnet(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified HostSubnet
     *
     * @param string $name   name of the HostSubnet
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNetworkOpenshiftIoV1HostSubnet(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * replace the specified HostSubnet
     *
     * @param Models\V1HostSubnet $body   TODO: type description here
     * @param string              $name   name of the HostSubnet
     * @param string              $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNetworkOpenshiftIoV1HostSubnet(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * delete a HostSubnet
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the HostSubnet
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1HostSubnet(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified HostSubnet
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the HostSubnet
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNetworkOpenshiftIoV1HostSubnet(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * list or watch objects of kind EgressNetworkPolicy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicyList');
    }

    /**
     * create an EgressNetworkPolicy
     *
     * @param Models\V1EgressNetworkPolicy $body      TODO: type description here
     * @param string                       $mnamespace object name and auth scope, such as for teams and projects
     * @param string                       $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * delete collection of EgressNetworkPolicy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicy(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified EgressNetworkPolicy
     *
     * @param string $name      name of the EgressNetworkPolicy
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * replace the specified EgressNetworkPolicy
     *
     * @param Models\V1EgressNetworkPolicy $body      TODO: type description here
     * @param string                       $name      name of the EgressNetworkPolicy
     * @param string                       $mnamespace object name and auth scope, such as for teams and projects
     * @param string                       $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * delete an EgressNetworkPolicy
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the EgressNetworkPolicy
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified EgressNetworkPolicy
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the EgressNetworkPolicy
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * list or watch objects of kind NetNamespace
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNetworkOpenshiftIoV1NetNamespace(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespaceList');
    }

    /**
     * create a NetNamespace
     *
     * @param Models\V1NetNamespace $body   TODO: type description here
     * @param string                $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNetworkOpenshiftIoV1NetNamespace(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * delete collection of NetNamespace
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1CollectionNetNamespace(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified NetNamespace
     *
     * @param string $name   name of the NetNamespace
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNetworkOpenshiftIoV1NetNamespace(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * replace the specified NetNamespace
     *
     * @param Models\V1NetNamespace $body   TODO: type description here
     * @param string                $name   name of the NetNamespace
     * @param string                $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNetworkOpenshiftIoV1NetNamespace(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * delete a NetNamespace
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the NetNamespace
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetworkOpenshiftIoV1NetNamespace(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified NetNamespace
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the NetNamespace
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNetworkOpenshiftIoV1NetNamespace(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * watch individual changes to a list of ClusterNetwork
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1ClusterNetworkList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/watch/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind ClusterNetwork
     *
     * @param string  $name            name of the ClusterNetwork
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1ClusterNetwork(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/watch/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of EgressNetworkPolicy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/watch/egressnetworkpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of HostSubnet
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1HostSubnetList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/watch/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind HostSubnet
     *
     * @param string  $name            name of the HostSubnet
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1HostSubnet(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/watch/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of EgressNetworkPolicy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/watch/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind EgressNetworkPolicy
     *
     * @param string  $name            name of the EgressNetworkPolicy
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/apis/network.openshift.io/v1/watch/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of NetNamespace
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1NetNamespaceList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/watch/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind NetNamespace
     *
     * @param string  $name            name of the NetNamespace
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetworkOpenshiftIoV1NetNamespace(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/apis/network.openshift.io/v1/watch/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }
}
