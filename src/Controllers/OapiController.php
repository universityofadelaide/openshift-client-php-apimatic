<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Controllers;

use OpenShiftAPIWithKubernetesLib\APIException;
use OpenShiftAPIWithKubernetesLib\APIHelper;
use OpenShiftAPIWithKubernetesLib\Configuration;
use OpenShiftAPIWithKubernetesLib\Models;
use OpenShiftAPIWithKubernetesLib\Exceptions;
use OpenShiftAPIWithKubernetesLib\Http\HttpRequest;
use OpenShiftAPIWithKubernetesLib\Http\HttpResponse;
use OpenShiftAPIWithKubernetesLib\Http\HttpMethod;
use OpenShiftAPIWithKubernetesLib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class OapiController extends BaseController
{
    /**
     * @var OapiController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return OapiController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * list supported server API versions
     *
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getOapiVersion()
    {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 208)) {
            throw new APIException('Default Response.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
    }

    /**
     * get available resources
     *
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getAPIResources()
    {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1APIResourceList');
    }

    /**
     * list objects of kind AppliedClusterResourceQuota
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listAppliedClusterResourceQuotaForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/appliedclusterresourcequotas';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuotaList');
    }

    /**
     * list or watch objects of kind BuildConfig
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listBuildConfigForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/buildconfigs';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildConfigList');
    }

    /**
     * create a BuildConfig
     *
     * @param Models\V1BuildConfig $body   TODO: type description here
     * @param string               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createBuildConfigForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/buildconfigs';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildConfig');
    }

    /**
     * list or watch objects of kind Build
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listBuildForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/builds';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildList');
    }

    /**
     * create a Build
     *
     * @param Models\V1Build $body   TODO: type description here
     * @param string         $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createBuildForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/builds';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Build');
    }

    /**
     * list or watch objects of kind ClusterNetwork
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listClusterNetwork(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetworkList');
    }

    /**
     * create a ClusterNetwork
     *
     * @param Models\V1ClusterNetwork $body   TODO: type description here
     * @param string                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createClusterNetwork(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * delete collection of ClusterNetwork
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionClusterNetwork(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified ClusterNetwork
     *
     * @param string $name   name of the ClusterNetwork
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadClusterNetwork(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * replace the specified ClusterNetwork
     *
     * @param Models\V1ClusterNetwork $body   TODO: type description here
     * @param string                  $name   name of the ClusterNetwork
     * @param string                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceClusterNetwork(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * delete a ClusterNetwork
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ClusterNetwork
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteClusterNetwork(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ClusterNetwork
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterNetwork
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchClusterNetwork(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterNetwork');
    }

    /**
     * list or watch objects of kind ClusterPolicy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listClusterPolicy(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyList');
    }

    /**
     * create a ClusterPolicy
     *
     * @param Models\V1ClusterPolicy $body   TODO: type description here
     * @param string                 $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createClusterPolicy(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * delete collection of ClusterPolicy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionClusterPolicy(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified ClusterPolicy
     *
     * @param string $name   name of the ClusterPolicy
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadClusterPolicy(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * replace the specified ClusterPolicy
     *
     * @param Models\V1ClusterPolicy $body   TODO: type description here
     * @param string                 $name   name of the ClusterPolicy
     * @param string                 $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceClusterPolicy(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * delete a ClusterPolicy
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ClusterPolicy
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteClusterPolicy(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ClusterPolicy
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterPolicy
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchClusterPolicy(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * list or watch objects of kind ClusterPolicyBinding
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listClusterPolicyBinding(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicybindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBindingList');
    }

    /**
     * create a ClusterPolicyBinding
     *
     * @param Models\V1ClusterPolicyBinding $body   TODO: type description here
     * @param string                        $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createClusterPolicyBinding(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicybindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * delete collection of ClusterPolicyBinding
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionClusterPolicyBinding(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicybindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified ClusterPolicyBinding
     *
     * @param string $name   name of the ClusterPolicyBinding
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadClusterPolicyBinding(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * replace the specified ClusterPolicyBinding
     *
     * @param Models\V1ClusterPolicyBinding $body   TODO: type description here
     * @param string                        $name   name of the ClusterPolicyBinding
     * @param string                        $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceClusterPolicyBinding(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * delete a ClusterPolicyBinding
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ClusterPolicyBinding
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteClusterPolicyBinding(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ClusterPolicyBinding
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterPolicyBinding
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchClusterPolicyBinding(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterpolicybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * list or watch objects of kind ClusterResourceQuota
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listClusterResourceQuota(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuotaList');
    }

    /**
     * create a ClusterResourceQuota
     *
     * @param Models\V1AppliedClusterResourceQuota $body   TODO: type description here
     * @param string                               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createClusterResourceQuota(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * delete collection of ClusterResourceQuota
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionClusterResourceQuota(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified ClusterResourceQuota
     *
     * @param string $name   name of the ClusterResourceQuota
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadClusterResourceQuota(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * replace the specified ClusterResourceQuota
     *
     * @param Models\V1AppliedClusterResourceQuota $body   TODO: type description here
     * @param string                               $name   name of the ClusterResourceQuota
     * @param string                               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceClusterResourceQuota(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * delete a ClusterResourceQuota
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ClusterResourceQuota
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteClusterResourceQuota(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ClusterResourceQuota
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterResourceQuota
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchClusterResourceQuota(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * read status of the specified ClusterResourceQuota
     *
     * @param string $name   name of the ClusterResourceQuota
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadClusterResourceQuotaStatus(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * replace status of the specified ClusterResourceQuota
     *
     * @param Models\V1AppliedClusterResourceQuota $body   TODO: type description here
     * @param string                               $name   name of the ClusterResourceQuota
     * @param string                               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceClusterResourceQuotaStatus(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * partially update status of the specified ClusterResourceQuota
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterResourceQuota
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchClusterResourceQuotaStatus(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterresourcequotas/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * list objects of kind ClusterRoleBinding
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listClusterRoleBinding(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterrolebindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBindingList');
    }

    /**
     * create a ClusterRoleBinding
     *
     * @param Models\V1ClusterRoleBinding $body   TODO: type description here
     * @param string                      $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createClusterRoleBinding(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterrolebindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * read the specified ClusterRoleBinding
     *
     * @param string $name   name of the ClusterRoleBinding
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadClusterRoleBinding(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterrolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * replace the specified ClusterRoleBinding
     *
     * @param Models\V1ClusterRoleBinding $body   TODO: type description here
     * @param string                      $name   name of the ClusterRoleBinding
     * @param string                      $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceClusterRoleBinding(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterrolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * delete a ClusterRoleBinding
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ClusterRoleBinding
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteClusterRoleBinding(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterrolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ClusterRoleBinding
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterRoleBinding
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchClusterRoleBinding(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterrolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * list objects of kind ClusterRole
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listClusterRole(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterroles';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleList');
    }

    /**
     * create a ClusterRole
     *
     * @param Models\V1ClusterRole $body   TODO: type description here
     * @param string               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createClusterRole(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterroles';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * read the specified ClusterRole
     *
     * @param string $name   name of the ClusterRole
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadClusterRole(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterroles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * replace the specified ClusterRole
     *
     * @param Models\V1ClusterRole $body   TODO: type description here
     * @param string               $name   name of the ClusterRole
     * @param string               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceClusterRole(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterroles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * delete a ClusterRole
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ClusterRole
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteClusterRole(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterroles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ClusterRole
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the ClusterRole
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchClusterRole(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/clusterroles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * create a DeploymentConfigRollback
     *
     * @param Models\V1DeploymentConfigRollback $body   TODO: type description here
     * @param string                            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createDeploymentConfigRollbackForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/deploymentconfigrollbacks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfigRollback');
    }

    /**
     * list or watch objects of kind DeploymentConfig
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listDeploymentConfigForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/deploymentconfigs';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfigList');
    }

    /**
     * create a DeploymentConfig
     *
     * @param Models\V1DeploymentConfig $body   TODO: type description here
     * @param string                    $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createDeploymentConfigForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/deploymentconfigs';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * list or watch objects of kind EgressNetworkPolicy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listEgressNetworkPolicyForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/egressnetworkpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicyList');
    }

    /**
     * create an EgressNetworkPolicy
     *
     * @param Models\V1EgressNetworkPolicy $body   TODO: type description here
     * @param string                       $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createEgressNetworkPolicyForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/egressnetworkpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * list or watch objects of kind Group
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listGroup(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/groups';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1GroupList');
    }

    /**
     * create a Group
     *
     * @param Models\V1Group $body   TODO: type description here
     * @param string         $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createGroup(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/groups';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Group');
    }

    /**
     * delete collection of Group
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionGroup(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/groups';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified Group
     *
     * @param string $name   name of the Group
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadGroup(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/groups/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Group');
    }

    /**
     * replace the specified Group
     *
     * @param Models\V1Group $body   TODO: type description here
     * @param string         $name   name of the Group
     * @param string         $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceGroup(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/groups/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Group');
    }

    /**
     * delete a Group
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Group
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteGroup(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/groups/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Group
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the Group
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchGroup(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/groups/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Group');
    }

    /**
     * list or watch objects of kind HostSubnet
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listHostSubnet(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnetList');
    }

    /**
     * create a HostSubnet
     *
     * @param Models\V1HostSubnet $body   TODO: type description here
     * @param string              $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createHostSubnet(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * delete collection of HostSubnet
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionHostSubnet(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified HostSubnet
     *
     * @param string $name   name of the HostSubnet
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadHostSubnet(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * replace the specified HostSubnet
     *
     * @param Models\V1HostSubnet $body   TODO: type description here
     * @param string              $name   name of the HostSubnet
     * @param string              $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceHostSubnet(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * delete a HostSubnet
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the HostSubnet
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteHostSubnet(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified HostSubnet
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the HostSubnet
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchHostSubnet(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1HostSubnet');
    }

    /**
     * list or watch objects of kind Identity
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listIdentity(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/identities';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1IdentityList');
    }

    /**
     * create an Identity
     *
     * @param Models\V1Identity $body   TODO: type description here
     * @param string            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createIdentity(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/identities';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Identity');
    }

    /**
     * delete collection of Identity
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionIdentity(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/identities';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified Identity
     *
     * @param string $name   name of the Identity
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadIdentity(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/identities/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Identity');
    }

    /**
     * replace the specified Identity
     *
     * @param Models\V1Identity $body   TODO: type description here
     * @param string            $name   name of the Identity
     * @param string            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceIdentity(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/identities/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Identity');
    }

    /**
     * delete an Identity
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Identity
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteIdentity(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/identities/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Identity
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the Identity
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchIdentity(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/identities/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Identity');
    }

    /**
     * list or watch objects of kind Image
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listImage(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/images';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageList');
    }

    /**
     * create an Image
     *
     * @param Models\V1Image $body   TODO: type description here
     * @param string         $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createImage(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/images';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Image');
    }

    /**
     * delete collection of Image
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionImage(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/images';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified Image
     *
     * @param string $name   name of the Image
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadImage(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/images/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Image');
    }

    /**
     * replace the specified Image
     *
     * @param Models\V1Image $body   TODO: type description here
     * @param string         $name   name of the Image
     * @param string         $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceImage(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/images/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Image');
    }

    /**
     * delete an Image
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Image
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteImage(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/images/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Image
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the Image
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchImage(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/images/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Image');
    }

    /**
     * create an ImageSignature
     *
     * @param Models\V1ImageSignature $body   TODO: type description here
     * @param string                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createImageSignature(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagesignatures';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageSignature');
    }

    /**
     * delete an ImageSignature
     *
     * @param string $name   name of the ImageSignature
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteImageSignature(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagesignatures/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * create an ImageStreamImport
     *
     * @param Models\V1ImageStreamImport $body   TODO: type description here
     * @param string                     $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createImageStreamImportForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagestreamimports';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamImport');
    }

    /**
     * create an ImageStreamMapping
     *
     * @param Models\V1ImageStreamMapping $body   TODO: type description here
     * @param string                      $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createImageStreamMappingForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagestreammappings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamMapping');
    }

    /**
     * list or watch objects of kind ImageStream
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listImageStreamForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagestreams';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamList');
    }

    /**
     * create an ImageStream
     *
     * @param Models\V1ImageStream $body   TODO: type description here
     * @param string               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createImageStreamForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagestreams';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * list objects of kind ImageStreamTag
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listImageStreamTagForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagestreamtags';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamTagList');
    }

    /**
     * create an ImageStreamTag
     *
     * @param Models\V1ImageStreamTag $body   TODO: type description here
     * @param string                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createImageStreamTagForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/imagestreamtags';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamTag');
    }

    /**
     * create a LocalResourceAccessReview
     *
     * @param Models\V1LocalResourceAccessReview $body   TODO: type description here
     * @param string                             $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createLocalResourceAccessReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/localresourceaccessreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalResourceAccessReview');
    }

    /**
     * create a LocalSubjectAccessReview
     *
     * @param Models\V1LocalSubjectAccessReview $body   TODO: type description here
     * @param string                            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createLocalSubjectAccessReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/localsubjectaccessreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalSubjectAccessReview');
    }

    /**
     * list objects of kind AppliedClusterResourceQuota
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedAppliedClusterResourceQuota(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/appliedclusterresourcequotas';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuotaList');
    }

    /**
     * read the specified AppliedClusterResourceQuota
     *
     * @param string $name      name of the AppliedClusterResourceQuota
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedAppliedClusterResourceQuota(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/appliedclusterresourcequotas/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1AppliedClusterResourceQuota');
    }

    /**
     * list or watch objects of kind BuildConfig
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedBuildConfig(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/buildconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildConfigList');
    }

    /**
     * create a BuildConfig
     *
     * @param Models\V1BuildConfig $body      TODO: type description here
     * @param string               $mnamespace object name and auth scope, such as for teams and projects
     * @param string               $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedBuildConfig(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/buildconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildConfig');
    }

    /**
     * delete collection of BuildConfig
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedBuildConfig(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/buildconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified BuildConfig
     *
     * @param string $name      name of the BuildConfig
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedBuildConfig(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/buildconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildConfig');
    }

    /**
     * replace the specified BuildConfig
     *
     * @param Models\V1BuildConfig $body      TODO: type description here
     * @param string               $name      name of the BuildConfig
     * @param string               $mnamespace object name and auth scope, such as for teams and projects
     * @param string               $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedBuildConfig(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/buildconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildConfig');
    }

    /**
     * delete a BuildConfig
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the BuildConfig
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedBuildConfig(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/buildconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified BuildConfig
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the BuildConfig
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedBuildConfig(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/buildconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildConfig');
    }

    /**
     * create instantiate of a BuildRequest
     *
     * @param Models\V1BuildRequest $body      TODO: type description here
     * @param string                $name      name of the BuildRequest
     * @param string                $mnamespace object name and auth scope, such as for teams and projects
     * @param string                $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedBuildRequestInstantiate(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/instantiate';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildRequest');
    }

    /**
     * connect POST requests to instantiatebinary of BinaryBuildRequestOptions
     *
     * @param string $name                    name of the BinaryBuildRequestOptions
     * @param string $mnamespace              object name and auth scope, such as for teams and projects
     * @param string $asFile                  (optional) asFile determines if the binary should be created as a file
     *                                        within the source rather than extracted as an archive
     * @param string $revisionAuthorEmail     (optional) revision.authorEmail of the source control user
     * @param string $revisionAuthorName      (optional) revision.authorName of the source control user
     * @param string $revisionCommit          (optional) revision.commit is the value identifying a specific commit
     * @param string $revisionCommitterEmail  (optional) revision.committerEmail of the source control user
     * @param string $revisionCommitterName   (optional) revision.committerName of the source control user
     * @param string $revisionMessage         (optional) revision.message is the description of a specific commit
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createConnectPostNamespacedBinaryBuildRequestOptionsInstantiatebinary(
        $name,
        $mnamespace,
        $asFile = null,
        $revisionAuthorEmail = null,
        $revisionAuthorName = null,
        $revisionCommit = null,
        $revisionCommitterEmail = null,
        $revisionCommitterName = null,
        $revisionMessage = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/instantiatebinary';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'                    => $name,
            'namespace'               => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'asFile'                  => $asFile,
            'revision.authorEmail'    => $revisionAuthorEmail,
            'revision.authorName'     => $revisionAuthorName,
            'revision.commit'         => $revisionCommit,
            'revision.committerEmail' => $revisionCommitterEmail,
            'revision.committerName'  => $revisionCommitterName,
            'revision.message'        => $revisionMessage,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'            => 'APIMATIC 2.0'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * connect POST requests to webhooks of Build
     *
     * @param string $name      name of the Build
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $path      (optional) Path is the URL path to use for the current proxy request to pod.
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createConnectPostNamespacedBuildWebhooks(
        $name,
        $mnamespace,
        $path = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'path'      => $path,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * connect POST requests to webhooks of Build
     *
     * @param string $name      name of the Build
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $path      path to the resource
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createConnectPostNamespacedBuildWebhooksWithPath(
        $name,
        $mnamespace,
        $path
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks/{path}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            'path'      => $path,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * list or watch objects of kind Build
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedBuild(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildList');
    }

    /**
     * create a Build
     *
     * @param Models\V1Build $body      TODO: type description here
     * @param string         $mnamespace object name and auth scope, such as for teams and projects
     * @param string         $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedBuild(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Build');
    }

    /**
     * delete collection of Build
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedBuild(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified Build
     *
     * @param string $name      name of the Build
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedBuild(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Build');
    }

    /**
     * replace the specified Build
     *
     * @param Models\V1Build $body      TODO: type description here
     * @param string         $name      name of the Build
     * @param string         $mnamespace object name and auth scope, such as for teams and projects
     * @param string         $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedBuild(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Build');
    }

    /**
     * delete a Build
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Build
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedBuild(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Build
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the Build
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedBuild(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Build');
    }

    /**
     * create clone of a BuildRequest
     *
     * @param Models\V1BuildRequest $body      TODO: type description here
     * @param string                $name      name of the BuildRequest
     * @param string                $mnamespace object name and auth scope, such as for teams and projects
     * @param string                $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedBuildRequestClone(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds/{name}/clone';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildRequest');
    }

    /**
     * replace details of the specified Build
     *
     * @param Models\V1Build $body      TODO: type description here
     * @param string         $name      name of the Build
     * @param string         $mnamespace object name and auth scope, such as for teams and projects
     * @param string         $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedBuildDetails(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds/{name}/details';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Build');
    }

    /**
     * read log of the specified BuildLog
     *
     * @param string  $name         name of the BuildLog
     * @param string  $mnamespace   object name and auth scope, such as for teams and projects
     * @param string  $container    (optional) cointainer for which to stream logs. Defaults to only container if there
     *                              is one container in the pod.
     * @param bool    $follow       (optional) follow if true indicates that the build log should be streamed until the
     *                              build terminates.
     * @param integer $limitBytes   (optional) limitBytes, If set, is the number of bytes to read from the server
     *                              before terminating the log output. This may not display a complete final line of
     *                              logging, and may return slightly more or slightly less than the specified limit.
     * @param bool    $nowait       (optional) noWait if true causes the call to return immediately even if the build
     *                              is not available yet. Otherwise the server will wait until the build has started.
     * @param string  $pretty       (optional) If 'true', then the output is pretty printed.
     * @param bool    $previous     (optional) previous returns previous build logs. Defaults to false.
     * @param integer $sinceSeconds (optional) sinceSeconds is a relative time in seconds before the current time from
     *                              which to show logs. If this value precedes the time a pod was started, only logs
     *                              since the pod start will be returned. If this value is in the future, no logs will
     *                              be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param integer $tailLines    (optional) tailLines, If set, is the number of lines from the end of the logs to
     *                              show. If not specified, logs are shown from the creation of the container or
     *                              sinceSeconds or sinceTime
     * @param bool    $timestamps   (optional) timestamps, If true, add an RFC3339 or RFC3339Nano timestamp at the
     *                              beginning of every line of log output. Defaults to false.
     * @param integer $version      (optional) version of the build for which to view logs.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedBuildLogLog(
        $name,
        $mnamespace,
        $container = null,
        $follow = null,
        $limitBytes = null,
        $nowait = null,
        $pretty = null,
        $previous = null,
        $sinceSeconds = null,
        $tailLines = null,
        $timestamps = null,
        $version = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/builds/{name}/log';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'         => $name,
            'namespace'    => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'container'    => $container,
            'follow'       => var_export($follow, true),
            'limitBytes'   => $limitBytes,
            'nowait'       => var_export($nowait, true),
            'pretty'       => $pretty,
            'previous'     => var_export($previous, true),
            'sinceSeconds' => $sinceSeconds,
            'tailLines'    => $tailLines,
            'timestamps'   => var_export($timestamps, true),
            'version'      => $version,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildLog');
    }

    /**
     * create a DeploymentConfigRollback
     *
     * @param Models\V1DeploymentConfigRollback $body      TODO: type description here
     * @param string                            $mnamespace object name and auth scope, such as for teams and projects
     * @param string                            $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedDeploymentConfigRollback(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigrollbacks';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfigRollback');
    }

    /**
     * list or watch objects of kind DeploymentConfig
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedDeploymentConfig(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfigList');
    }

    /**
     * create a DeploymentConfig
     *
     * @param Models\V1DeploymentConfig $body      TODO: type description here
     * @param string                    $mnamespace object name and auth scope, such as for teams and projects
     * @param string                    $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedDeploymentConfig(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * delete collection of DeploymentConfig
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedDeploymentConfig(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified DeploymentConfig
     *
     * @param string $name      name of the DeploymentConfig
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedDeploymentConfig(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * replace the specified DeploymentConfig
     *
     * @param Models\V1DeploymentConfig $body      TODO: type description here
     * @param string                    $name      name of the DeploymentConfig
     * @param string                    $mnamespace object name and auth scope, such as for teams and projects
     * @param string                    $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedDeploymentConfig(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * delete a DeploymentConfig
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the DeploymentConfig
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedDeploymentConfig(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified DeploymentConfig
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the DeploymentConfig
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedDeploymentConfig(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * create instantiate of a DeploymentRequest
     *
     * @param Models\V1DeploymentRequest $body      TODO: type description here
     * @param string                     $name      name of the DeploymentRequest
     * @param string                     $mnamespace object name and auth scope, such as for teams and projects
     * @param string                     $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedDeploymentRequestInstantiate(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/instantiate';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentRequest');
    }

    /**
     * read log of the specified DeploymentLog
     *
     * @param string  $name         name of the DeploymentLog
     * @param string  $mnamespace   object name and auth scope, such as for teams and projects
     * @param string  $container    (optional) The container for which to stream logs. Defaults to only container if
     *                              there is one container in the pod.
     * @param bool    $follow       (optional) Follow if true indicates that the build log should be streamed until the
     *                              build terminates.
     * @param integer $limitBytes   (optional) If set, the number of bytes to read from the server before terminating
     *                              the log output. This may not display a complete final line of logging, and may
     *                              return slightly more or slightly less than the specified limit.
     * @param bool    $nowait       (optional) NoWait if true causes the call to return immediately even if the
     *                              deployment is not available yet. Otherwise the server will wait until the
     *                              deployment has started.
     * @param string  $pretty       (optional) If 'true', then the output is pretty printed.
     * @param bool    $previous     (optional) Return previous deployment logs. Defaults to false.
     * @param integer $sinceSeconds (optional) A relative time in seconds before the current time from which to show
     *                              logs. If this value precedes the time a pod was started, only logs since the pod
     *                              start will be returned. If this value is in the future, no logs will be returned.
     *                              Only one of sinceSeconds or sinceTime may be specified.
     * @param integer $tailLines    (optional) If set, the number of lines from the end of the logs to show. If not
     *                              specified, logs are shown from the creation of the container or sinceSeconds or
     *                              sinceTime
     * @param bool    $timestamps   (optional) If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of
     *                              every line of log output. Defaults to false.
     * @param integer $version      (optional) Version of the deployment for which to view logs.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedDeploymentLogLog(
        $name,
        $mnamespace,
        $container = null,
        $follow = null,
        $limitBytes = null,
        $nowait = null,
        $pretty = null,
        $previous = null,
        $sinceSeconds = null,
        $tailLines = null,
        $timestamps = null,
        $version = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/log';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'         => $name,
            'namespace'    => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'container'    => $container,
            'follow'       => var_export($follow, true),
            'limitBytes'   => $limitBytes,
            'nowait'       => var_export($nowait, true),
            'pretty'       => $pretty,
            'previous'     => var_export($previous, true),
            'sinceSeconds' => $sinceSeconds,
            'tailLines'    => $tailLines,
            'timestamps'   => var_export($timestamps, true),
            'version'      => $version,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1BuildLog');
    }

    /**
     * create rollback of a DeploymentConfigRollback
     *
     * @param Models\V1DeploymentConfigRollback $body      TODO: type description here
     * @param string                            $name      name of the DeploymentConfigRollback
     * @param string                            $mnamespace object name and auth scope, such as for teams and projects
     * @param string                            $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedDeploymentConfigRollbackRollback(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/rollback';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfigRollback');
    }

    /**
     * read scale of the specified Scale
     *
     * @param string $name      name of the Scale
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedScaleScale(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/scale';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1beta1Scale');
    }

    /**
     * replace scale of the specified Scale
     *
     * @param Models\V1beta1Scale $body      TODO: type description here
     * @param string              $name      name of the Scale
     * @param string              $mnamespace object name and auth scope, such as for teams and projects
     * @param string              $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedScaleScale(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/scale';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1beta1Scale');
    }

    /**
     * partially update scale of the specified Scale
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the Scale
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedScaleScale(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/scale';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1beta1Scale');
    }

    /**
     * read status of the specified DeploymentConfig
     *
     * @param string $name      name of the DeploymentConfig
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedDeploymentConfigStatus(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * replace status of the specified DeploymentConfig
     *
     * @param Models\V1DeploymentConfig $body      TODO: type description here
     * @param string                    $name      name of the DeploymentConfig
     * @param string                    $mnamespace object name and auth scope, such as for teams and projects
     * @param string                    $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedDeploymentConfigStatus(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * partially update status of the specified DeploymentConfig
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the DeploymentConfig
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedDeploymentConfigStatus(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/deploymentconfigs/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1DeploymentConfig');
    }

    /**
     * list or watch objects of kind EgressNetworkPolicy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedEgressNetworkPolicy(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicyList');
    }

    /**
     * create an EgressNetworkPolicy
     *
     * @param Models\V1EgressNetworkPolicy $body      TODO: type description here
     * @param string                       $mnamespace object name and auth scope, such as for teams and projects
     * @param string                       $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedEgressNetworkPolicy(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * delete collection of EgressNetworkPolicy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedEgressNetworkPolicy(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified EgressNetworkPolicy
     *
     * @param string $name      name of the EgressNetworkPolicy
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedEgressNetworkPolicy(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * replace the specified EgressNetworkPolicy
     *
     * @param Models\V1EgressNetworkPolicy $body      TODO: type description here
     * @param string                       $name      name of the EgressNetworkPolicy
     * @param string                       $mnamespace object name and auth scope, such as for teams and projects
     * @param string                       $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedEgressNetworkPolicy(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * delete an EgressNetworkPolicy
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the EgressNetworkPolicy
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedEgressNetworkPolicy(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified EgressNetworkPolicy
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the EgressNetworkPolicy
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedEgressNetworkPolicy(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1EgressNetworkPolicy');
    }

    /**
     * read the specified ImageStreamImage
     *
     * @param string $name      name of the ImageStreamImage
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedImageStreamImage(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamimages/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamImage');
    }

    /**
     * create an ImageStreamImport
     *
     * @param Models\V1ImageStreamImport $body      TODO: type description here
     * @param string                     $mnamespace object name and auth scope, such as for teams and projects
     * @param string                     $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedImageStreamImport(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamimports';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamImport');
    }

    /**
     * create an ImageStreamMapping
     *
     * @param Models\V1ImageStreamMapping $body      TODO: type description here
     * @param string                      $mnamespace object name and auth scope, such as for teams and projects
     * @param string                      $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedImageStreamMapping(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreammappings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamMapping');
    }

    /**
     * list or watch objects of kind ImageStream
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedImageStream(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamList');
    }

    /**
     * create an ImageStream
     *
     * @param Models\V1ImageStream $body      TODO: type description here
     * @param string               $mnamespace object name and auth scope, such as for teams and projects
     * @param string               $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedImageStream(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * delete collection of ImageStream
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedImageStream(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified ImageStream
     *
     * @param string $name      name of the ImageStream
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedImageStream(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * replace the specified ImageStream
     *
     * @param Models\V1ImageStream $body      TODO: type description here
     * @param string               $name      name of the ImageStream
     * @param string               $mnamespace object name and auth scope, such as for teams and projects
     * @param string               $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedImageStream(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * delete an ImageStream
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the ImageStream
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedImageStream(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ImageStream
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the ImageStream
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedImageStream(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * read secrets of the specified SecretList
     *
     * @param string  $name            name of the SecretList
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedSecretListSecrets(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/imagestreams/{name}/secrets';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1SecretList');
    }

    /**
     * read status of the specified ImageStream
     *
     * @param string $name      name of the ImageStream
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedImageStreamStatus(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * replace status of the specified ImageStream
     *
     * @param Models\V1ImageStream $body      TODO: type description here
     * @param string               $name      name of the ImageStream
     * @param string               $mnamespace object name and auth scope, such as for teams and projects
     * @param string               $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedImageStreamStatus(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * partially update status of the specified ImageStream
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the ImageStream
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedImageStreamStatus(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreams/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStream');
    }

    /**
     * list objects of kind ImageStreamTag
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedImageStreamTag(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamtags';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamTagList');
    }

    /**
     * create an ImageStreamTag
     *
     * @param Models\V1ImageStreamTag $body      TODO: type description here
     * @param string                  $mnamespace object name and auth scope, such as for teams and projects
     * @param string                  $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedImageStreamTag(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamtags';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamTag');
    }

    /**
     * read the specified ImageStreamTag
     *
     * @param string $name      name of the ImageStreamTag
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedImageStreamTag(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamtags/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamTag');
    }

    /**
     * replace the specified ImageStreamTag
     *
     * @param Models\V1ImageStreamTag $body      TODO: type description here
     * @param string                  $name      name of the ImageStreamTag
     * @param string                  $mnamespace object name and auth scope, such as for teams and projects
     * @param string                  $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedImageStreamTag(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamtags/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamTag');
    }

    /**
     * delete an ImageStreamTag
     *
     * @param string $name      name of the ImageStreamTag
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedImageStreamTag(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamtags/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified ImageStreamTag
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the ImageStreamTag
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedImageStreamTag(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/imagestreamtags/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ImageStreamTag');
    }

    /**
     * create a LocalResourceAccessReview
     *
     * @param Models\V1LocalResourceAccessReview $body      TODO: type description here
     * @param string                             $mnamespace object name and auth scope, such as for teams and projects
     * @param string                             $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedLocalResourceAccessReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/localresourceaccessreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalResourceAccessReview');
    }

    /**
     * create a LocalSubjectAccessReview
     *
     * @param Models\V1LocalSubjectAccessReview $body      TODO: type description here
     * @param string                            $mnamespace object name and auth scope, such as for teams and projects
     * @param string                            $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedLocalSubjectAccessReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/localsubjectaccessreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalSubjectAccessReview');
    }

    /**
     * create a PodSecurityPolicyReview
     *
     * @param Models\V1PodSecurityPolicyReview $body      TODO: type description here
     * @param string                           $mnamespace object name and auth scope, such as for teams and projects
     * @param string                           $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedPodSecurityPolicyReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/podsecuritypolicyreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1PodSecurityPolicyReview');
    }

    /**
     * create a PodSecurityPolicySelfSubjectReview
     *
     * @param Models\V1PodSecurityPolicySelfSubjectReview $body      TODO: type description here
     * @param string                                      $mnamespace object name and auth scope, such as for teams and
     *                                                               projects
     * @param string                                      $pretty    (optional) If 'true', then the output is pretty
     *                                                               printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedPodSecurityPolicySelfSubjectReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/podsecuritypolicyselfsubjectreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1PodSecurityPolicySelfSubjectReview');
    }

    /**
     * create a PodSecurityPolicySubjectReview
     *
     * @param Models\V1PodSecurityPolicySubjectReview $body      TODO: type description here
     * @param string                                  $mnamespace object name and auth scope, such as for teams and
     *                                                           projects
     * @param string                                  $pretty    (optional) If 'true', then the output is pretty
     *                                                           printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedPodSecurityPolicySubjectReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/podsecuritypolicysubjectreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1PodSecurityPolicySubjectReview');
    }

    /**
     * list or watch objects of kind Policy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedPolicy(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyList');
    }

    /**
     * create a Policy
     *
     * @param Models\V1ClusterPolicy $body      TODO: type description here
     * @param string                 $mnamespace object name and auth scope, such as for teams and projects
     * @param string                 $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedPolicy(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * delete collection of Policy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedPolicy(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified Policy
     *
     * @param string $name      name of the Policy
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedPolicy(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * replace the specified Policy
     *
     * @param Models\V1ClusterPolicy $body      TODO: type description here
     * @param string                 $name      name of the Policy
     * @param string                 $mnamespace object name and auth scope, such as for teams and projects
     * @param string                 $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedPolicy(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * delete a Policy
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Policy
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedPolicy(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Policy
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the Policy
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedPolicy(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * list or watch objects of kind PolicyBinding
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedPolicyBinding(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policybindings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBindingList');
    }

    /**
     * create a PolicyBinding
     *
     * @param Models\V1ClusterPolicyBinding $body      TODO: type description here
     * @param string                        $mnamespace object name and auth scope, such as for teams and projects
     * @param string                        $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedPolicyBinding(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policybindings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * delete collection of PolicyBinding
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedPolicyBinding(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policybindings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified PolicyBinding
     *
     * @param string $name      name of the PolicyBinding
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedPolicyBinding(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * replace the specified PolicyBinding
     *
     * @param Models\V1ClusterPolicyBinding $body      TODO: type description here
     * @param string                        $name      name of the PolicyBinding
     * @param string                        $mnamespace object name and auth scope, such as for teams and projects
     * @param string                        $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedPolicyBinding(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * delete a PolicyBinding
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the PolicyBinding
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedPolicyBinding(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified PolicyBinding
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the PolicyBinding
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedPolicyBinding(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/policybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * create a ResourceAccessReview
     *
     * @param Models\V1LocalResourceAccessReview $body      TODO: type description here
     * @param string                             $mnamespace object name and auth scope, such as for teams and projects
     * @param string                             $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedResourceAccessReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/resourceaccessreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalResourceAccessReview');
    }

    /**
     * list or watch objects of kind RoleBindingRestriction
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedRoleBindingRestriction(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindingrestrictions';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RoleBindingRestrictionList');
    }

    /**
     * create a RoleBindingRestriction
     *
     * @param Models\V1RoleBindingRestriction $body      TODO: type description here
     * @param string                          $mnamespace object name and auth scope, such as for teams and projects
     * @param string                          $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedRoleBindingRestriction(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindingrestrictions';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RoleBindingRestriction');
    }

    /**
     * delete collection of RoleBindingRestriction
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedRoleBindingRestriction(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindingrestrictions';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified RoleBindingRestriction
     *
     * @param string $name      name of the RoleBindingRestriction
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedRoleBindingRestriction(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/rolebindingrestrictions/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RoleBindingRestriction');
    }

    /**
     * replace the specified RoleBindingRestriction
     *
     * @param Models\V1RoleBindingRestriction $body      TODO: type description here
     * @param string                          $name      name of the RoleBindingRestriction
     * @param string                          $mnamespace object name and auth scope, such as for teams and projects
     * @param string                          $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedRoleBindingRestriction(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/rolebindingrestrictions/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RoleBindingRestriction');
    }

    /**
     * delete a RoleBindingRestriction
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the RoleBindingRestriction
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedRoleBindingRestriction(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/rolebindingrestrictions/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified RoleBindingRestriction
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the RoleBindingRestriction
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedRoleBindingRestriction(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/namespaces/{namespace}/rolebindingrestrictions/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RoleBindingRestriction');
    }

    /**
     * list objects of kind RoleBinding
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedRoleBinding(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBindingList');
    }

    /**
     * create a RoleBinding
     *
     * @param Models\V1ClusterRoleBinding $body      TODO: type description here
     * @param string                      $mnamespace object name and auth scope, such as for teams and projects
     * @param string                      $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedRoleBinding(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * read the specified RoleBinding
     *
     * @param string $name      name of the RoleBinding
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedRoleBinding(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * replace the specified RoleBinding
     *
     * @param Models\V1ClusterRoleBinding $body      TODO: type description here
     * @param string                      $name      name of the RoleBinding
     * @param string                      $mnamespace object name and auth scope, such as for teams and projects
     * @param string                      $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedRoleBinding(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * delete a RoleBinding
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the RoleBinding
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedRoleBinding(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified RoleBinding
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the RoleBinding
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedRoleBinding(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/rolebindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * list objects of kind Role
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedRole(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/roles';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleList');
    }

    /**
     * create a Role
     *
     * @param Models\V1ClusterRole $body      TODO: type description here
     * @param string               $mnamespace object name and auth scope, such as for teams and projects
     * @param string               $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedRole(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/roles';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * read the specified Role
     *
     * @param string $name      name of the Role
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedRole(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/roles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * replace the specified Role
     *
     * @param Models\V1ClusterRole $body      TODO: type description here
     * @param string               $name      name of the Role
     * @param string               $mnamespace object name and auth scope, such as for teams and projects
     * @param string               $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedRole(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/roles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * delete a Role
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Role
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedRole(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/roles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Role
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the Role
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedRole(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/roles/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * list or watch objects of kind Route
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedRoute(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RouteList');
    }

    /**
     * create a Route
     *
     * @param Models\V1Route $body      TODO: type description here
     * @param string         $mnamespace object name and auth scope, such as for teams and projects
     * @param string         $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedRoute(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * delete collection of Route
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedRoute(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified Route
     *
     * @param string $name      name of the Route
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedRoute(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * replace the specified Route
     *
     * @param Models\V1Route $body      TODO: type description here
     * @param string         $name      name of the Route
     * @param string         $mnamespace object name and auth scope, such as for teams and projects
     * @param string         $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedRoute(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * delete a Route
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Route
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedRoute(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Route
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the Route
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedRoute(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * read status of the specified Route
     *
     * @param string $name      name of the Route
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedRouteStatus(
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * replace status of the specified Route
     *
     * @param Models\V1Route $body      TODO: type description here
     * @param string         $name      name of the Route
     * @param string         $mnamespace object name and auth scope, such as for teams and projects
     * @param string         $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedRouteStatus(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * partially update status of the specified Route
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the Route
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedRouteStatus(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/routes/{name}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * create a SelfSubjectRulesReview
     *
     * @param Models\V1SelfSubjectRulesReview $body      TODO: type description here
     * @param string                          $mnamespace object name and auth scope, such as for teams and projects
     * @param string                          $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedSelfSubjectRulesReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/selfsubjectrulesreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1SelfSubjectRulesReview');
    }

    /**
     * create a SubjectAccessReview
     *
     * @param Models\V1LocalSubjectAccessReview $body      TODO: type description here
     * @param string                            $mnamespace object name and auth scope, such as for teams and projects
     * @param string                            $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedSubjectAccessReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/subjectaccessreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalSubjectAccessReview');
    }

    /**
     * create a SubjectRulesReview
     *
     * @param Models\V1SubjectRulesReview $body      TODO: type description here
     * @param string                      $mnamespace object name and auth scope, such as for teams and projects
     * @param string                      $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedSubjectRulesReview(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/subjectrulesreviews';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1SubjectRulesReview');
    }

    /**
     * list or watch objects of kind Template
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNamespacedTemplate(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/templates';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1TemplateList');
    }

    /**
     * create a Template
     *
     * @param Models\V1Template $body      TODO: type description here
     * @param string            $mnamespace object name and auth scope, such as for teams and projects
     * @param string            $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNamespacedTemplate(
        $body,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/templates';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Template');
    }

    /**
     * delete collection of Template
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNamespacedTemplate(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/templates';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified Template
     *
     * @param string $name      name of the Template
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param bool   $exact     (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                          like 'Namespace'.
     * @param bool   $export    (optional) Should this value be exported.  Export strips fields that a user can not
     *                          specify.
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNamespacedTemplate(
        $name,
        $mnamespace,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/templates/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'     => var_export($exact, true),
            'export'    => var_export($export, true),
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Template');
    }

    /**
     * replace the specified Template
     *
     * @param Models\V1Template $body      TODO: type description here
     * @param string            $name      name of the Template
     * @param string            $mnamespace object name and auth scope, such as for teams and projects
     * @param string            $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNamespacedTemplate(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/templates/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Template');
    }

    /**
     * delete a Template
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the Template
     * @param string                 $mnamespace         object name and auth scope, such as for teams and projects
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNamespacedTemplate(
        $body,
        $name,
        $mnamespace,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/templates/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            'namespace'          => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Template
     *
     * @param object $body      TODO: type description here
     * @param string $name      name of the Template
     * @param string $mnamespace object name and auth scope, such as for teams and projects
     * @param string $pretty    (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNamespacedTemplate(
        $body,
        $name,
        $mnamespace,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/namespaces/{namespace}/templates/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'      => $name,
            'namespace' => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty'    => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Template');
    }

    /**
     * list or watch objects of kind NetNamespace
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listNetNamespace(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespaceList');
    }

    /**
     * create a NetNamespace
     *
     * @param Models\V1NetNamespace $body   TODO: type description here
     * @param string                $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createNetNamespace(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * delete collection of NetNamespace
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionNetNamespace(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified NetNamespace
     *
     * @param string $name   name of the NetNamespace
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadNetNamespace(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * replace the specified NetNamespace
     *
     * @param Models\V1NetNamespace $body   TODO: type description here
     * @param string                $name   name of the NetNamespace
     * @param string                $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceNetNamespace(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * delete a NetNamespace
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the NetNamespace
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteNetNamespace(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified NetNamespace
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the NetNamespace
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchNetNamespace(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NetNamespace');
    }

    /**
     * list or watch objects of kind OAuthAccessToken
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listOAuthAccessToken(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthaccesstokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAccessTokenList');
    }

    /**
     * create an OAuthAccessToken
     *
     * @param Models\V1OAuthAccessToken $body   TODO: type description here
     * @param string                    $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createOAuthAccessToken(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthaccesstokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAccessToken');
    }

    /**
     * delete collection of OAuthAccessToken
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionOAuthAccessToken(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthaccesstokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified OAuthAccessToken
     *
     * @param string $name   name of the OAuthAccessToken
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadOAuthAccessToken(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthaccesstokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAccessToken');
    }

    /**
     * replace the specified OAuthAccessToken
     *
     * @param Models\V1OAuthAccessToken $body   TODO: type description here
     * @param string                    $name   name of the OAuthAccessToken
     * @param string                    $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceOAuthAccessToken(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthaccesstokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAccessToken');
    }

    /**
     * delete an OAuthAccessToken
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the OAuthAccessToken
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteOAuthAccessToken(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthaccesstokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified OAuthAccessToken
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the OAuthAccessToken
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchOAuthAccessToken(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthaccesstokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAccessToken');
    }

    /**
     * list or watch objects of kind OAuthAuthorizeToken
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listOAuthAuthorizeToken(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthauthorizetokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAuthorizeTokenList');
    }

    /**
     * create an OAuthAuthorizeToken
     *
     * @param Models\V1OAuthAuthorizeToken $body   TODO: type description here
     * @param string                       $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createOAuthAuthorizeToken(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthauthorizetokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAuthorizeToken');
    }

    /**
     * delete collection of OAuthAuthorizeToken
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionOAuthAuthorizeToken(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthauthorizetokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified OAuthAuthorizeToken
     *
     * @param string $name   name of the OAuthAuthorizeToken
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadOAuthAuthorizeToken(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthauthorizetokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAuthorizeToken');
    }

    /**
     * replace the specified OAuthAuthorizeToken
     *
     * @param Models\V1OAuthAuthorizeToken $body   TODO: type description here
     * @param string                       $name   name of the OAuthAuthorizeToken
     * @param string                       $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceOAuthAuthorizeToken(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthauthorizetokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAuthorizeToken');
    }

    /**
     * delete an OAuthAuthorizeToken
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the OAuthAuthorizeToken
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteOAuthAuthorizeToken(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthauthorizetokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified OAuthAuthorizeToken
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the OAuthAuthorizeToken
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchOAuthAuthorizeToken(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthauthorizetokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthAuthorizeToken');
    }

    /**
     * list or watch objects of kind OAuthClientAuthorization
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listOAuthClientAuthorization(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclientauthorizations';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClientAuthorizationList');
    }

    /**
     * create an OAuthClientAuthorization
     *
     * @param Models\V1OAuthClientAuthorization $body   TODO: type description here
     * @param string                            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createOAuthClientAuthorization(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclientauthorizations';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClientAuthorization');
    }

    /**
     * delete collection of OAuthClientAuthorization
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionOAuthClientAuthorization(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclientauthorizations';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified OAuthClientAuthorization
     *
     * @param string $name   name of the OAuthClientAuthorization
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadOAuthClientAuthorization(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclientauthorizations/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClientAuthorization');
    }

    /**
     * replace the specified OAuthClientAuthorization
     *
     * @param Models\V1OAuthClientAuthorization $body   TODO: type description here
     * @param string                            $name   name of the OAuthClientAuthorization
     * @param string                            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceOAuthClientAuthorization(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclientauthorizations/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClientAuthorization');
    }

    /**
     * delete an OAuthClientAuthorization
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the OAuthClientAuthorization
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteOAuthClientAuthorization(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclientauthorizations/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified OAuthClientAuthorization
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the OAuthClientAuthorization
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchOAuthClientAuthorization(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclientauthorizations/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClientAuthorization');
    }

    /**
     * list or watch objects of kind OAuthClient
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listOAuthClient(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclients';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClientList');
    }

    /**
     * create an OAuthClient
     *
     * @param Models\V1OAuthClient $body   TODO: type description here
     * @param string               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createOAuthClient(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclients';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClient');
    }

    /**
     * delete collection of OAuthClient
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionOAuthClient(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclients';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified OAuthClient
     *
     * @param string $name   name of the OAuthClient
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadOAuthClient(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclients/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClient');
    }

    /**
     * replace the specified OAuthClient
     *
     * @param Models\V1OAuthClient $body   TODO: type description here
     * @param string               $name   name of the OAuthClient
     * @param string               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceOAuthClient(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclients/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClient');
    }

    /**
     * delete an OAuthClient
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the OAuthClient
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteOAuthClient(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclients/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified OAuthClient
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the OAuthClient
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchOAuthClient(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/oauthclients/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1OAuthClient');
    }

    /**
     * create a PodSecurityPolicyReview
     *
     * @param Models\V1PodSecurityPolicyReview $body   TODO: type description here
     * @param string                           $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPodSecurityPolicyReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/podsecuritypolicyreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1PodSecurityPolicyReview');
    }

    /**
     * create a PodSecurityPolicySelfSubjectReview
     *
     * @param Models\V1PodSecurityPolicySelfSubjectReview $body   TODO: type description here
     * @param string                                      $pretty (optional) If 'true', then the output is pretty
     *                                                            printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPodSecurityPolicySelfSubjectReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/podsecuritypolicyselfsubjectreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1PodSecurityPolicySelfSubjectReview');
    }

    /**
     * create a PodSecurityPolicySubjectReview
     *
     * @param Models\V1PodSecurityPolicySubjectReview $body   TODO: type description here
     * @param string                                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPodSecurityPolicySubjectReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/podsecuritypolicysubjectreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1PodSecurityPolicySubjectReview');
    }

    /**
     * list or watch objects of kind Policy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listPolicyForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/policies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyList');
    }

    /**
     * create a Policy
     *
     * @param Models\V1ClusterPolicy $body   TODO: type description here
     * @param string                 $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPolicyForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/policies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicy');
    }

    /**
     * list or watch objects of kind PolicyBinding
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listPolicyBindingForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/policybindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBindingList');
    }

    /**
     * create a PolicyBinding
     *
     * @param Models\V1ClusterPolicyBinding $body   TODO: type description here
     * @param string                        $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createPolicyBindingForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/policybindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterPolicyBinding');
    }

    /**
     * list objects of kind ProjectRequest
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listProjectRequest(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projectrequests';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * create a ProjectRequest
     *
     * @param Models\V1ProjectRequest $body   TODO: type description here
     * @param string                  $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createProjectRequest(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projectrequests';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ProjectRequest');
    }

    /**
     * list or watch objects of kind Project
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listProject(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projects';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1NamespaceList');
    }

    /**
     * create a Project
     *
     * @param Models\V1Namespace $body   TODO: type description here
     * @param string             $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createProject(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projects';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Namespace');
    }

    /**
     * read the specified Project
     *
     * @param string $name   name of the Project
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadProject(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projects/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Namespace');
    }

    /**
     * replace the specified Project
     *
     * @param Models\V1Namespace $body   TODO: type description here
     * @param string             $name   name of the Project
     * @param string             $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceProject(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projects/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Namespace');
    }

    /**
     * delete a Project
     *
     * @param string $name   name of the Project
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteProject(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projects/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified Project
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the Project
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchProject(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/projects/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Namespace');
    }

    /**
     * create a ResourceAccessReview
     *
     * @param Models\V1LocalResourceAccessReview $body   TODO: type description here
     * @param string                             $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createResourceAccessReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/resourceaccessreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalResourceAccessReview');
    }

    /**
     * list or watch objects of kind RoleBindingRestriction
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listRoleBindingRestrictionForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/rolebindingrestrictions';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RoleBindingRestrictionList');
    }

    /**
     * create a RoleBindingRestriction
     *
     * @param Models\V1RoleBindingRestriction $body   TODO: type description here
     * @param string                          $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createRoleBindingRestrictionForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/rolebindingrestrictions';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RoleBindingRestriction');
    }

    /**
     * list objects of kind RoleBinding
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listRoleBindingForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/rolebindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBindingList');
    }

    /**
     * create a RoleBinding
     *
     * @param Models\V1ClusterRoleBinding $body   TODO: type description here
     * @param string                      $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createRoleBindingForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/rolebindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleBinding');
    }

    /**
     * list objects of kind Role
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listRoleForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/roles';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRoleList');
    }

    /**
     * create a Role
     *
     * @param Models\V1ClusterRole $body   TODO: type description here
     * @param string               $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createRoleForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/roles';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1ClusterRole');
    }

    /**
     * list or watch objects of kind Route
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listRouteForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/routes';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1RouteList');
    }

    /**
     * create a Route
     *
     * @param Models\V1Route $body   TODO: type description here
     * @param string         $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createRouteForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/routes';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Route');
    }

    /**
     * create a SelfSubjectRulesReview
     *
     * @param Models\V1SelfSubjectRulesReview $body   TODO: type description here
     * @param string                          $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSelfSubjectRulesReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/selfsubjectrulesreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1SelfSubjectRulesReview');
    }

    /**
     * create a SubjectAccessReview
     *
     * @param Models\V1LocalSubjectAccessReview $body   TODO: type description here
     * @param string                            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSubjectAccessReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/subjectaccessreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1LocalSubjectAccessReview');
    }

    /**
     * create a SubjectRulesReview
     *
     * @param Models\V1SubjectRulesReview $body   TODO: type description here
     * @param string                      $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSubjectRulesReviewForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/subjectrulesreviews';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1SubjectRulesReview');
    }

    /**
     * list or watch objects of kind Template
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listTemplateForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/templates';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1TemplateList');
    }

    /**
     * create a Template
     *
     * @param Models\V1Template $body   TODO: type description here
     * @param string            $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createTemplateForAllNamespaces(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/templates';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Template');
    }

    /**
     * create an UserIdentityMapping
     *
     * @param Models\V1UserIdentityMapping $body   TODO: type description here
     * @param string                       $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createUserIdentityMapping(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/useridentitymappings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1UserIdentityMapping');
    }

    /**
     * read the specified UserIdentityMapping
     *
     * @param string $name   name of the UserIdentityMapping
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadUserIdentityMapping(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/useridentitymappings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1UserIdentityMapping');
    }

    /**
     * replace the specified UserIdentityMapping
     *
     * @param Models\V1UserIdentityMapping $body   TODO: type description here
     * @param string                       $name   name of the UserIdentityMapping
     * @param string                       $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceUserIdentityMapping(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/useridentitymappings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1UserIdentityMapping');
    }

    /**
     * delete an UserIdentityMapping
     *
     * @param string $name   name of the UserIdentityMapping
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteUserIdentityMapping(
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/useridentitymappings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified UserIdentityMapping
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the UserIdentityMapping
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchUserIdentityMapping(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/useridentitymappings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1UserIdentityMapping');
    }

    /**
     * list or watch objects of kind User
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function listUser(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/users';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1UserList');
    }

    /**
     * create an User
     *
     * @param Models\V1User $body   TODO: type description here
     * @param string        $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createUser(
        $body,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/users';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1User');
    }

    /**
     * delete collection of User
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteCollectionUser(
        $fieldSelector = null,
        $labelSelector = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/users';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
            'pretty'          => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * read the specified User
     *
     * @param string $name   name of the User
     * @param bool   $exact  (optional) Should the export be exact.  Exact export maintains cluster-specific fields
     *                       like 'Namespace'.
     * @param bool   $export (optional) Should this value be exported.  Export strips fields that a user can not
     *                       specify.
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getReadUser(
        $name,
        $exact = null,
        $export = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/users/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'exact'  => var_export($exact, true),
            'export' => var_export($export, true),
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1User');
    }

    /**
     * replace the specified User
     *
     * @param Models\V1User $body   TODO: type description here
     * @param string        $name   name of the User
     * @param string        $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateReplaceUser(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/users/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1User');
    }

    /**
     * delete an User
     *
     * @param Models\V1DeleteOptions $body               TODO: type description here
     * @param string                 $name               name of the User
     * @param integer                $gracePeriodSeconds (optional) The duration in seconds before the object should be
     *                                                   deleted. Value must be non-negative integer. The value zero
     *                                                   indicates delete immediately. If this value is nil, the
     *                                                   default grace period for the specified type will be used.
     *                                                   Defaults to a per object value if not specified. zero means
     *                                                   delete immediately.
     * @param bool                   $orphanDependents   (optional) Deprecated: please use the PropagationPolicy, this
     *                                                   field will be deprecated in 1.7. Should the dependent objects
     *                                                   be orphaned. If true/false, the "orphan" finalizer will be
     *                                                   added to/removed from the object's finalizers list. Either
     *                                                   this field or PropagationPolicy may be set, but not both.
     * @param string                 $propagationPolicy  (optional) Whether and how garbage collection will be
     *                                                   performed. Either this field or OrphanDependents may be set,
     *                                                   but not both. The default policy is decided by the existing
     *                                                   finalizer set in the metadata.finalizers and the resource-
     *                                                   specific default policy.
     * @param string                 $pretty             (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteUser(
        $body,
        $name,
        $gracePeriodSeconds = null,
        $orphanDependents = null,
        $propagationPolicy = null,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/users/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'               => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'gracePeriodSeconds' => $gracePeriodSeconds,
            'orphanDependents'   => var_export($orphanDependents, true),
            'propagationPolicy'  => $propagationPolicy,
            'pretty'             => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'content-type'     => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1Status');
    }

    /**
     * partially update the specified User
     *
     * @param object $body   TODO: type description here
     * @param string $name   name of the User
     * @param string $pretty (optional) If 'true', then the output is pretty printed.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function patchUser(
        $body,
        $name,
        $pretty = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/users/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'   => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'pretty' => $pretty,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::patch($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1User');
    }

    /**
     * watch individual changes to a list of BuildConfig
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchBuildConfigListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/buildconfigs';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Build
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchBuildListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/builds';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of ClusterNetwork
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterNetworkList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusternetworks';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind ClusterNetwork
     *
     * @param string  $name            name of the ClusterNetwork
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterNetwork(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusternetworks/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of ClusterPolicy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterPolicyList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusterpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind ClusterPolicy
     *
     * @param string  $name            name of the ClusterPolicy
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterPolicy(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusterpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of ClusterPolicyBinding
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterPolicyBindingList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusterpolicybindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind ClusterPolicyBinding
     *
     * @param string  $name            name of the ClusterPolicyBinding
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterPolicyBinding(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusterpolicybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of ClusterResourceQuota
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterResourceQuotaList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusterresourcequotas';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind ClusterResourceQuota
     *
     * @param string  $name            name of the ClusterResourceQuota
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchClusterResourceQuota(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/clusterresourcequotas/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of DeploymentConfig
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchDeploymentConfigListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/deploymentconfigs';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of EgressNetworkPolicy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchEgressNetworkPolicyListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/egressnetworkpolicies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Group
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchGroupList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/groups';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Group
     *
     * @param string  $name            name of the Group
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchGroup(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/groups/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of HostSubnet
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchHostSubnetList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/hostsubnets';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind HostSubnet
     *
     * @param string  $name            name of the HostSubnet
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchHostSubnet(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/hostsubnets/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Identity
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchIdentityList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/identities';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Identity
     *
     * @param string  $name            name of the Identity
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchIdentity(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/identities/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Image
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchImageList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/images';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Image
     *
     * @param string  $name            name of the Image
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchImage(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/images/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of ImageStream
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchImageStreamListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/imagestreams';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of BuildConfig
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedBuildConfigList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/buildconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind BuildConfig
     *
     * @param string  $name            name of the BuildConfig
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedBuildConfig(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/buildconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Build
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedBuildList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/builds';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Build
     *
     * @param string  $name            name of the Build
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedBuild(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/builds/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of DeploymentConfig
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedDeploymentConfigList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/deploymentconfigs';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind DeploymentConfig
     *
     * @param string  $name            name of the DeploymentConfig
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedDeploymentConfig(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/watch/namespaces/{namespace}/deploymentconfigs/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of EgressNetworkPolicy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedEgressNetworkPolicyList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/watch/namespaces/{namespace}/egressnetworkpolicies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind EgressNetworkPolicy
     *
     * @param string  $name            name of the EgressNetworkPolicy
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedEgressNetworkPolicy(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/watch/namespaces/{namespace}/egressnetworkpolicies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of ImageStream
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedImageStreamList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/imagestreams';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind ImageStream
     *
     * @param string  $name            name of the ImageStream
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedImageStream(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/imagestreams/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Policy
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedPolicyList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/policies';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Policy
     *
     * @param string  $name            name of the Policy
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedPolicy(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/policies/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of PolicyBinding
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedPolicyBindingList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/policybindings';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind PolicyBinding
     *
     * @param string  $name            name of the PolicyBinding
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedPolicyBinding(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/watch/namespaces/{namespace}/policybindings/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of RoleBindingRestriction
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedRoleBindingRestrictionList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/watch/namespaces/{namespace}/rolebindingrestrictions';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind RoleBindingRestriction
     *
     * @param string  $name            name of the RoleBindingRestriction
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedRoleBindingRestriction(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.
            '/oapi/v1/watch/namespaces/{namespace}/rolebindingrestrictions/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Route
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedRouteList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/routes';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Route
     *
     * @param string  $name            name of the Route
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedRoute(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/routes/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Template
     *
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedTemplateList(
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/templates';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Template
     *
     * @param string  $name            name of the Template
     * @param string  $mnamespace      object name and auth scope, such as for teams and projects
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNamespacedTemplate(
        $name,
        $mnamespace,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/namespaces/{namespace}/templates/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            'namespace'       => $mnamespace,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of NetNamespace
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetNamespaceList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/netnamespaces';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind NetNamespace
     *
     * @param string  $name            name of the NetNamespace
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchNetNamespace(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/netnamespaces/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of OAuthAccessToken
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthAccessTokenList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthaccesstokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind OAuthAccessToken
     *
     * @param string  $name            name of the OAuthAccessToken
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthAccessToken(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthaccesstokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of OAuthAuthorizeToken
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthAuthorizeTokenList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthauthorizetokens';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind OAuthAuthorizeToken
     *
     * @param string  $name            name of the OAuthAuthorizeToken
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthAuthorizeToken(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthauthorizetokens/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of OAuthClientAuthorization
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthClientAuthorizationList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthclientauthorizations';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind OAuthClientAuthorization
     *
     * @param string  $name            name of the OAuthClientAuthorization
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthClientAuthorization(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthclientauthorizations/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of OAuthClient
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthClientList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthclients';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind OAuthClient
     *
     * @param string  $name            name of the OAuthClient
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchOAuthClient(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/oauthclients/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Policy
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchPolicyListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/policies';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of PolicyBinding
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchPolicyBindingListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/policybindings';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Project
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchProjectList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/projects';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind Project
     *
     * @param string  $name            name of the Project
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchProject(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/projects/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of RoleBindingRestriction
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchRoleBindingRestrictionListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/rolebindingrestrictions';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Route
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchRouteListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/routes';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of Template
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchTemplateListForAllNamespaces(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/templates';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch individual changes to a list of User
     *
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchUserList(
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/users';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }

    /**
     * watch changes to an object of kind User
     *
     * @param string  $name            name of the User
     * @param string  $fieldSelector   (optional) A selector to restrict the list of returned objects by their fields.
     *                                 Defaults to everything.
     * @param string  $labelSelector   (optional) A selector to restrict the list of returned objects by their labels.
     *                                 Defaults to everything.
     * @param string  $pretty          (optional) If 'true', then the output is pretty printed.
     * @param string  $resourceVersion (optional) When specified with a watch call, shows changes that occur after that
     *                                 particular version of a resource. Defaults to changes from the beginning of
     *                                 history. When specified for list: - if unset, then the result is returned from
     *                                 remote storage based on quorum-read flag; - if it's 0, then we simply return
     *                                 what we currently have in cache, no guarantee; - if set to non zero, then the
     *                                 result is at least as fresh as given rv.
     * @param integer $timeoutSeconds  (optional) Timeout for the list/watch call.
     * @param bool    $watch           (optional) Watch for changes to the described resources and return them as a
     *                                 stream of add, update, and remove notifications. Specify resourceVersion.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getWatchUser(
        $name,
        $fieldSelector = null,
        $labelSelector = null,
        $pretty = null,
        $resourceVersion = null,
        $timeoutSeconds = null,
        $watch = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oapi/v1/watch/users/{name}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'name'            => $name,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'fieldSelector'   => $fieldSelector,
            'labelSelector'   => $labelSelector,
            'pretty'          => $pretty,
            'resourceVersion' => $resourceVersion,
            'timeoutSeconds'  => $timeoutSeconds,
            'watch'           => var_export($watch, true),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'OpenShiftAPIWithKubernetesLib\\Models\\V1WatchEvent');
    }
}
