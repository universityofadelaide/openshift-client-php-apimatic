<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * PodSecurityContext holds pod-level security attributes and common container settings. Some fields
 * are also present in container.securityContext.  Field values of container.securityContext take
 * precedence over field values of PodSecurityContext.
 */
class V1PodSecurityContext implements JsonSerializable
{
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
     * If unset, the Kubelet will not modify the ownership and permissions of any volume.
     * @var integer|null $fsGroup public property
     */
    public $fsGroup;

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @var bool|null $runAsNonRoot public property
     */
    public $runAsNonRoot;

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     * @var integer|null $runAsUser public property
     */
    public $runAsUser;

    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     * @var V1SELinuxOptions|null $seLinuxOptions public property
     */
    public $seLinuxOptions;

    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
     * @var array|null $supplementalGroups public property
     */
    public $supplementalGroups;

    /**
     * Constructor to set initial or default values of member properties
     * @param integer          $fsGroup            Initialization value for $this->fsGroup
     * @param bool             $runAsNonRoot       Initialization value for $this->runAsNonRoot
     * @param integer          $runAsUser          Initialization value for $this->runAsUser
     * @param V1SELinuxOptions $seLinuxOptions     Initialization value for $this->seLinuxOptions
     * @param array            $supplementalGroups Initialization value for $this->supplementalGroups
     */
    public function __construct()
    {
        if (5 == func_num_args()) {
            $this->fsGroup            = func_get_arg(0);
            $this->runAsNonRoot       = func_get_arg(1);
            $this->runAsUser          = func_get_arg(2);
            $this->seLinuxOptions     = func_get_arg(3);
            $this->supplementalGroups = func_get_arg(4);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['fsGroup']            = $this->fsGroup;
        $json['runAsNonRoot']       = $this->runAsNonRoot;
        $json['runAsUser']          = $this->runAsUser;
        $json['seLinuxOptions']     = $this->seLinuxOptions;
        $json['supplementalGroups'] = $this->supplementalGroups;

        return $json;
    }
}
