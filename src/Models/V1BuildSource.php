<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * BuildSource is the SCM used for the build.
 */
class V1BuildSource implements JsonSerializable
{
    /**
     * type of build input to accept
     * @required
     * @var string $type public property
     */
    public $type;

    /**
     * binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For Docker builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and Docker builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.
     * @var V1BinaryBuildSource|null $binary public property
     */
    public $binary;

    /**
     * contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.
     * @var string|null $contextDir public property
     */
    public $contextDir;

    /**
     * dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.
     * @var string|null $dockerfile public property
     */
    public $dockerfile;

    /**
     * git contains optional information about git build source
     * @var V1GitBuildSource|null $git public property
     */
    public $git;

    /**
     * images describes a set of images to be used to provide source for the build
     * @var V1ImageSource[]|null $images public property
     */
    public $images;

    /**
     * secrets represents a list of secrets and their destinations that will be used only for the build.
     * @var V1SecretBuildSource[]|null $secrets public property
     */
    public $secrets;

    /**
     * sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.
     * @var V1LocalObjectReference|null $sourceSecret public property
     */
    public $sourceSecret;

    /**
     * Constructor to set initial or default values of member properties
     * @param string                 $type         Initialization value for $this->type
     * @param V1BinaryBuildSource    $binary       Initialization value for $this->binary
     * @param string                 $contextDir   Initialization value for $this->contextDir
     * @param string                 $dockerfile   Initialization value for $this->dockerfile
     * @param V1GitBuildSource       $git          Initialization value for $this->git
     * @param array                  $images       Initialization value for $this->images
     * @param array                  $secrets      Initialization value for $this->secrets
     * @param V1LocalObjectReference $sourceSecret Initialization value for $this->sourceSecret
     */
    public function __construct()
    {
        if (8 == func_num_args()) {
            $this->type         = func_get_arg(0);
            $this->binary       = func_get_arg(1);
            $this->contextDir   = func_get_arg(2);
            $this->dockerfile   = func_get_arg(3);
            $this->git          = func_get_arg(4);
            $this->images       = func_get_arg(5);
            $this->secrets      = func_get_arg(6);
            $this->sourceSecret = func_get_arg(7);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['type']         = $this->type;
        $json['binary']       = $this->binary;
        $json['contextDir']   = $this->contextDir;
        $json['dockerfile']   = $this->dockerfile;
        $json['git']          = $this->git;
        $json['images']       = $this->images;
        $json['secrets']      = $this->secrets;
        $json['sourceSecret'] = $this->sourceSecret;

        return $json;
    }
}
