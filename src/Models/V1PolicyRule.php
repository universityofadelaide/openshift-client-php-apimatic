<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * PolicyRule holds information that describes a policy rule, but does not contain information about
 * who the rule applies to or which namespace the rule applies to.
 */
class V1PolicyRule implements JsonSerializable
{
    /**
     * APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed
     * @required
     * @var array $apiGroups public property
     */
    public $apiGroups;

    /**
     * Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
     * @required
     * @var array $resources public property
     */
    public $resources;

    /**
     * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
     * @required
     * @var array $verbs public property
     */
    public $verbs;

    /**
     * AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.
     * @var RuntimeRawExtension|null $attributeRestrictions public property
     */
    public $attributeRestrictions;

    /**
     * NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.
     * @var array|null $nonResourceURLs public property
     */
    public $nonResourceURLs;

    /**
     * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
     * @var array|null $resourceNames public property
     */
    public $resourceNames;

    /**
     * Constructor to set initial or default values of member properties
     * @param array               $apiGroups             Initialization value for $this->apiGroups
     * @param array               $resources             Initialization value for $this->resources
     * @param array               $verbs                 Initialization value for $this->verbs
     * @param RuntimeRawExtension $attributeRestrictions Initialization value for $this->attributeRestrictions
     * @param array               $nonResourceURLs       Initialization value for $this->nonResourceURLs
     * @param array               $resourceNames         Initialization value for $this->resourceNames
     */
    public function __construct()
    {
        if (6 == func_num_args()) {
            $this->apiGroups             = func_get_arg(0);
            $this->resources             = func_get_arg(1);
            $this->verbs                 = func_get_arg(2);
            $this->attributeRestrictions = func_get_arg(3);
            $this->nonResourceURLs       = func_get_arg(4);
            $this->resourceNames         = func_get_arg(5);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['apiGroups']             = $this->apiGroups;
        $json['resources']             = $this->resources;
        $json['verbs']                 = $this->verbs;
        $json['attributeRestrictions'] = $this->attributeRestrictions;
        $json['nonResourceURLs']       = $this->nonResourceURLs;
        $json['resourceNames']         = $this->resourceNames;

        return $json;
    }
}
