<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * DockerBuildStrategy defines input parameters specific to Docker build.
 */
class V1DockerBuildStrategy implements JsonSerializable
{
    /**
     * buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details.
     * @var V1EnvVar[]|null $buildArgs public property
     */
    public $buildArgs;

    /**
     * dockerfilePath is the path of the Dockerfile that will be used to build the Docker image, relative to the root of the context (contextDir).
     * @var string|null $dockerfilePath public property
     */
    public $dockerfilePath;

    /**
     * env contains additional environment variables you want to pass into a builder container. ValueFrom is not supported.
     * @var V1EnvVar[]|null $env public property
     */
    public $env;

    /**
     * forcePull describes if the builder should pull the images from registry prior to building.
     * @var bool|null $forcePull public property
     */
    public $forcePull;

    /**
     * from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled the resulting image will be used in the FROM line of the Dockerfile for this build.
     * @var V1ObjectReference|null $from public property
     */
    public $from;

    /**
     * imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the Docker build API. The experimental policy 'SkipLayers' will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.
     * @var string|null $imageOptimizationPolicy public property
     */
    public $imageOptimizationPolicy;

    /**
     * noCache if set to true indicates that the docker build must be executed with the --no-cache=true flag
     * @var bool|null $noCache public property
     */
    public $noCache;

    /**
     * pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries
     * @var V1LocalObjectReference|null $pullSecret public property
     */
    public $pullSecret;

    /**
     * Constructor to set initial or default values of member properties
     * @param array                  $buildArgs               Initialization value for $this->buildArgs
     * @param string                 $dockerfilePath          Initialization value for $this->dockerfilePath
     * @param array                  $env                     Initialization value for $this->env
     * @param bool                   $forcePull               Initialization value for $this->forcePull
     * @param V1ObjectReference      $from                    Initialization value for $this->from
     * @param string                 $imageOptimizationPolicy Initialization value for $this->imageOptimizationPolicy
     * @param bool                   $noCache                 Initialization value for $this->noCache
     * @param V1LocalObjectReference $pullSecret              Initialization value for $this->pullSecret
     */
    public function __construct()
    {
        if (8 == func_num_args()) {
            $this->buildArgs               = func_get_arg(0);
            $this->dockerfilePath          = func_get_arg(1);
            $this->env                     = func_get_arg(2);
            $this->forcePull               = func_get_arg(3);
            $this->from                    = func_get_arg(4);
            $this->imageOptimizationPolicy = func_get_arg(5);
            $this->noCache                 = func_get_arg(6);
            $this->pullSecret              = func_get_arg(7);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['buildArgs']               = $this->buildArgs;
        $json['dockerfilePath']          = $this->dockerfilePath;
        $json['env']                     = $this->env;
        $json['forcePull']               = $this->forcePull;
        $json['from']                    = $this->from;
        $json['imageOptimizationPolicy'] = $this->imageOptimizationPolicy;
        $json['noCache']                 = $this->noCache;
        $json['pullSecret']              = $this->pullSecret;

        return $json;
    }
}
