<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * RouteSpec describes the hostname or path the route exposes, any security information, and one or
 * more backends the route points to. Weights on each backend can define the balance of traffic sent to
 * each backend - if all weights are zero the route will be considered to have no backends and return a
 * standard 503 response.
 *
 * The `tls` field is optional and allows specific certificates or behavior for the route. Routers
 * typically configure a default certificate on a wildcard domain to terminate routes without explicit
 * certificates, but custom hostnames usually must choose passthrough (send traffic directly to the
 * backend via the TLS Server-Name- Indication field) or provide a certificate.
 */
class V1RouteSpec implements JsonSerializable
{
    /**
     * host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.
     * @required
     * @var string $host public property
     */
    public $host;

    /**
     * to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field is set to zero, no traffic will be sent to this service.
     * @required
     * @var V1RouteTargetReference $to public property
     */
    public $to;

    /**
     * alternateBackends is an extension of the 'to' field. If more than one service needs to be pointed to, then use this field. Use the weight field in RouteTargetReference object to specify relative preference. If the weight field is zero, the backend is ignored.
     * @var V1RouteTargetReference[]|null $alternateBackends public property
     */
    public $alternateBackends;

    /**
     * Path that the router watches for, to route traffic for to the service. Optional
     * @var string|null $path public property
     */
    public $path;

    /**
     * If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.
     * @var V1RoutePort|null $port public property
     */
    public $port;

    /**
     * The tls field provides the ability to configure certificates and termination for the route.
     * @var V1TLSConfig|null $tls public property
     */
    public $tls;

    /**
     * Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
     * @var string|null $wildcardPolicy public property
     */
    public $wildcardPolicy;

    /**
     * Constructor to set initial or default values of member properties
     * @param string                 $host              Initialization value for $this->host
     * @param V1RouteTargetReference $to                Initialization value for $this->to
     * @param array                  $alternateBackends Initialization value for $this->alternateBackends
     * @param string                 $path              Initialization value for $this->path
     * @param V1RoutePort            $port              Initialization value for $this->port
     * @param V1TLSConfig            $tls               Initialization value for $this->tls
     * @param string                 $wildcardPolicy    Initialization value for $this->wildcardPolicy
     */
    public function __construct()
    {
        if (7 == func_num_args()) {
            $this->host              = func_get_arg(0);
            $this->to                = func_get_arg(1);
            $this->alternateBackends = func_get_arg(2);
            $this->path              = func_get_arg(3);
            $this->port              = func_get_arg(4);
            $this->tls               = func_get_arg(5);
            $this->wildcardPolicy    = func_get_arg(6);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['host']              = $this->host;
        $json['to']                = $this->to;
        $json['alternateBackends'] = $this->alternateBackends;
        $json['path']              = $this->path;
        $json['port']              = $this->port;
        $json['tls']               = $this->tls;
        $json['wildcardPolicy']    = $this->wildcardPolicy;

        return $json;
    }
}
