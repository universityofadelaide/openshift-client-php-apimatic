<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * Probe describes a health check to be performed against a container to determine whether it is alive
 * or ready to receive traffic.
 */
class V1Probe implements JsonSerializable
{
    /**
     * One and only one of the following should be specified. Exec specifies the action to take.
     * @var V1ExecAction|null $exec public property
     */
    public $exec;

    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     * @var integer|null $failureThreshold public property
     */
    public $failureThreshold;

    /**
     * HTTPGet specifies the http request to perform.
     * @var V1HTTPGetAction|null $httpGet public property
     */
    public $httpGet;

    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     * @var integer|null $initialDelaySeconds public property
     */
    public $initialDelaySeconds;

    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     * @var integer|null $periodSeconds public property
     */
    public $periodSeconds;

    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
     * @var integer|null $successThreshold public property
     */
    public $successThreshold;

    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     * @var V1TCPSocketAction|null $tcpSocket public property
     */
    public $tcpSocket;

    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
     * @var integer|null $timeoutSeconds public property
     */
    public $timeoutSeconds;

    /**
     * Constructor to set initial or default values of member properties
     * @param V1ExecAction      $exec                Initialization value for $this->exec
     * @param integer           $failureThreshold    Initialization value for $this->failureThreshold
     * @param V1HTTPGetAction   $httpGet             Initialization value for $this->httpGet
     * @param integer           $initialDelaySeconds Initialization value for $this->initialDelaySeconds
     * @param integer           $periodSeconds       Initialization value for $this->periodSeconds
     * @param integer           $successThreshold    Initialization value for $this->successThreshold
     * @param V1TCPSocketAction $tcpSocket           Initialization value for $this->tcpSocket
     * @param integer           $timeoutSeconds      Initialization value for $this->timeoutSeconds
     */
    public function __construct()
    {
        if (8 == func_num_args()) {
            $this->exec                = func_get_arg(0);
            $this->failureThreshold    = func_get_arg(1);
            $this->httpGet             = func_get_arg(2);
            $this->initialDelaySeconds = func_get_arg(3);
            $this->periodSeconds       = func_get_arg(4);
            $this->successThreshold    = func_get_arg(5);
            $this->tcpSocket           = func_get_arg(6);
            $this->timeoutSeconds      = func_get_arg(7);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['exec']                = $this->exec;
        $json['failureThreshold']    = $this->failureThreshold;
        $json['httpGet']             = $this->httpGet;
        $json['initialDelaySeconds'] = $this->initialDelaySeconds;
        $json['periodSeconds']       = $this->periodSeconds;
        $json['successThreshold']    = $this->successThreshold;
        $json['tcpSocket']           = $this->tcpSocket;
        $json['timeoutSeconds']      = $this->timeoutSeconds;

        return $json;
    }
}
