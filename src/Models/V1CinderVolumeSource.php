<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a
 * container. The volume must also be in the same region as the kubelet. Cinder volumes support
 * ownership management and SELinux relabeling.
 */
class V1CinderVolumeSource implements JsonSerializable
{
    /**
     * volume id used to identify the volume in cinder More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     * @required
     * @var string $volumeID public property
     */
    public $volumeID;

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     * @var string|null $fsType public property
     */
    public $fsType;

    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     * @var bool|null $readOnly public property
     */
    public $readOnly;

    /**
     * Constructor to set initial or default values of member properties
     * @param string $volumeID Initialization value for $this->volumeID
     * @param string $fsType   Initialization value for $this->fsType
     * @param bool   $readOnly Initialization value for $this->readOnly
     */
    public function __construct()
    {
        if (3 == func_num_args()) {
            $this->volumeID = func_get_arg(0);
            $this->fsType   = func_get_arg(1);
            $this->readOnly = func_get_arg(2);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['volumeID'] = $this->volumeID;
        $json['fsType']   = $this->fsType;
        $json['readOnly'] = $this->readOnly;

        return $json;
    }
}
