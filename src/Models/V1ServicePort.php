<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * ServicePort contains information on service's port.
 */
class V1ServicePort implements JsonSerializable
{
    /**
     * The port that will be exposed by this service.
     * @required
     * @var integer $port public property
     */
    public $port;

    /**
     * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.
     * @var string|null $name public property
     */
    public $name;

    /**
     * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: http://kubernetes.io/docs/user-guide/services#type--nodeport
     * @var integer|null $nodePort public property
     */
    public $nodePort;

    /**
     * The IP protocol for this port. Supports "TCP" and "UDP". Default is TCP.
     * @var string|null $protocol public property
     */
    public $protocol;

    /**
     * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: http://kubernetes.io/docs/user-guide/services#defining-a-service
     * @var string|null $targetPort public property
     */
    public $targetPort;

    /**
     * Constructor to set initial or default values of member properties
     * @param integer $port       Initialization value for $this->port
     * @param string  $name       Initialization value for $this->name
     * @param integer $nodePort   Initialization value for $this->nodePort
     * @param string  $protocol   Initialization value for $this->protocol
     * @param string  $targetPort Initialization value for $this->targetPort
     */
    public function __construct()
    {
        if (5 == func_num_args()) {
            $this->port       = func_get_arg(0);
            $this->name       = func_get_arg(1);
            $this->nodePort   = func_get_arg(2);
            $this->protocol   = func_get_arg(3);
            $this->targetPort = func_get_arg(4);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['port']       = $this->port;
        $json['name']       = $this->name;
        $json['nodePort']   = $this->nodePort;
        $json['protocol']   = $this->protocol;
        $json['targetPort'] = $this->targetPort;

        return $json;
    }
}
