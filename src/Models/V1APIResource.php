<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * APIResource specifies the name of a resource and whether it is namespaced.
 */
class V1APIResource implements JsonSerializable
{
    /**
     * kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
     * @required
     * @var string $kind public property
     */
    public $kind;

    /**
     * name is the name of the resource.
     * @required
     * @var string $name public property
     */
    public $name;

    /**
     * namespaced indicates if a resource is namespaced or not.
     * @required
     * @var bool $namespaced public property
     */
    public $namespaced;

    /**
     * verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
     * @required
     * @var array $verbs public property
     */
    public $verbs;

    /**
     * shortNames is a list of suggested short names of the resource.
     * @var array|null $shortNames public property
     */
    public $shortNames;

    /**
     * Constructor to set initial or default values of member properties
     * @param string $kind       Initialization value for $this->kind
     * @param string $name       Initialization value for $this->name
     * @param bool   $namespaced Initialization value for $this->namespaced
     * @param array  $verbs      Initialization value for $this->verbs
     * @param array  $shortNames Initialization value for $this->shortNames
     */
    public function __construct()
    {
        if (5 == func_num_args()) {
            $this->kind       = func_get_arg(0);
            $this->name       = func_get_arg(1);
            $this->namespaced = func_get_arg(2);
            $this->verbs      = func_get_arg(3);
            $this->shortNames = func_get_arg(4);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['kind']       = $this->kind;
        $json['name']       = $this->name;
        $json['namespaced'] = $this->namespaced;
        $json['verbs']      = $this->verbs;
        $json['shortNames'] = $this->shortNames;

        return $json;
    }
}
