<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * Image is an immutable representation of a Docker image and metadata at a point in time.
 */
class V1Image implements JsonSerializable
{
    /**
     * DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
     * @required
     * @var V1ImageLayer[] $dockerImageLayers public property
     */
    public $dockerImageLayers;

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources
     * @var string|null $apiVersion public property
     */
    public $apiVersion;

    /**
     * DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.
     * @var string|null $dockerImageConfig public property
     */
    public $dockerImageConfig;

    /**
     * DockerImageManifest is the raw JSON of the manifest
     * @var string|null $dockerImageManifest public property
     */
    public $dockerImageManifest;

    /**
     * DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
     * @var string|null $dockerImageManifestMediaType public property
     */
    public $dockerImageManifestMediaType;

    /**
     * DockerImageMetadata contains metadata about this image
     * @var RuntimeRawExtension|null $dockerImageMetadata public property
     */
    public $dockerImageMetadata;

    /**
     * DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"
     * @var string|null $dockerImageMetadataVersion public property
     */
    public $dockerImageMetadataVersion;

    /**
     * DockerImageReference is the string that can be used to pull this image.
     * @var string|null $dockerImageReference public property
     */
    public $dockerImageReference;

    /**
     * DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.
     * @var array|null $dockerImageSignatures public property
     */
    public $dockerImageSignatures;

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     * @var string|null $kind public property
     */
    public $kind;

    /**
     * Standard object's metadata.
     * @var V1ObjectMeta|null $metadata public property
     */
    public $metadata;

    /**
     * Signatures holds all signatures of the image.
     * @var V1ImageSignature[]|null $signatures public property
     */
    public $signatures;

    /**
     * Constructor to set initial or default values of member properties
     * @param array               $dockerImageLayers            Initialization value for $this->dockerImageLayers
     * @param string              $apiVersion                   Initialization value for $this->apiVersion
     * @param string              $dockerImageConfig            Initialization value for $this->dockerImageConfig
     * @param string              $dockerImageManifest          Initialization value for $this->dockerImageManifest
     * @param string              $dockerImageManifestMediaType Initialization value for $this-
     *                                                            >dockerImageManifestMediaType
     * @param RuntimeRawExtension $dockerImageMetadata          Initialization value for $this->dockerImageMetadata
     * @param string              $dockerImageMetadataVersion   Initialization value for $this-
     *                                                            >dockerImageMetadataVersion
     * @param string              $dockerImageReference         Initialization value for $this->dockerImageReference
     * @param array               $dockerImageSignatures        Initialization value for $this->dockerImageSignatures
     * @param string              $kind                         Initialization value for $this->kind
     * @param V1ObjectMeta        $metadata                     Initialization value for $this->metadata
     * @param array               $signatures                   Initialization value for $this->signatures
     */
    public function __construct()
    {
        if (12 == func_num_args()) {
            $this->dockerImageLayers            = func_get_arg(0);
            $this->apiVersion                   = func_get_arg(1);
            $this->dockerImageConfig            = func_get_arg(2);
            $this->dockerImageManifest          = func_get_arg(3);
            $this->dockerImageManifestMediaType = func_get_arg(4);
            $this->dockerImageMetadata          = func_get_arg(5);
            $this->dockerImageMetadataVersion   = func_get_arg(6);
            $this->dockerImageReference         = func_get_arg(7);
            $this->dockerImageSignatures        = func_get_arg(8);
            $this->kind                         = func_get_arg(9);
            $this->metadata                     = func_get_arg(10);
            $this->signatures                   = func_get_arg(11);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['dockerImageLayers']            = $this->dockerImageLayers;
        $json['apiVersion']                   = $this->apiVersion;
        $json['dockerImageConfig']            = $this->dockerImageConfig;
        $json['dockerImageManifest']          = $this->dockerImageManifest;
        $json['dockerImageManifestMediaType'] = $this->dockerImageManifestMediaType;
        $json['dockerImageMetadata']          = $this->dockerImageMetadata;
        $json['dockerImageMetadataVersion']   = $this->dockerImageMetadataVersion;
        $json['dockerImageReference']         = $this->dockerImageReference;
        $json['dockerImageSignatures']        = $this->dockerImageSignatures;
        $json['kind']                         = $this->kind;
        $json['metadata']                     = $this->metadata;
        $json['signatures']                   = $this->signatures;

        return $json;
    }
}
