<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference any ClusterRole
 * in the same namespace or in the global namespace. It adds who information via (Users and Groups) OR
 * Subjects and namespace information by which namespace it exists in. ClusterRoleBindings in a given
 * namespace only have effect in that namespace (excepting the master namespace which has power in all
 * namespaces).
 */
class V1ClusterRoleBinding implements JsonSerializable
{
    /**
     * GroupNames holds all the groups directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.
     * @required
     * @var array $groupNames public property
     */
    public $groupNames;

    /**
     * RoleRef can only reference the current namespace and the global namespace. If the ClusterRoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role.
     * @required
     * @var V1ObjectReference $roleRef public property
     */
    public $roleRef;

    /**
     * Subjects hold object references to authorize with this rule. This field is ignored if UserNames or GroupNames are specified to support legacy clients and servers. Thus newer clients that do not need to support backwards compatibility should send only fully qualified Subjects and should omit the UserNames and GroupNames fields. Clients that need to support backwards compatibility can use this field to build the UserNames and GroupNames.
     * @required
     * @var V1ObjectReference[] $subjects public property
     */
    public $subjects;

    /**
     * UserNames holds all the usernames directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.
     * @required
     * @var array $userNames public property
     */
    public $userNames;

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources
     * @var string|null $apiVersion public property
     */
    public $apiVersion;

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     * @var string|null $kind public property
     */
    public $kind;

    /**
     * Standard object's metadata.
     * @var V1ObjectMeta|null $metadata public property
     */
    public $metadata;

    /**
     * Constructor to set initial or default values of member properties
     * @param array             $groupNames Initialization value for $this->groupNames
     * @param V1ObjectReference $roleRef    Initialization value for $this->roleRef
     * @param array             $subjects   Initialization value for $this->subjects
     * @param array             $userNames  Initialization value for $this->userNames
     * @param string            $apiVersion Initialization value for $this->apiVersion
     * @param string            $kind       Initialization value for $this->kind
     * @param V1ObjectMeta      $metadata   Initialization value for $this->metadata
     */
    public function __construct()
    {
        if (7 == func_num_args()) {
            $this->groupNames = func_get_arg(0);
            $this->roleRef    = func_get_arg(1);
            $this->subjects   = func_get_arg(2);
            $this->userNames  = func_get_arg(3);
            $this->apiVersion = func_get_arg(4);
            $this->kind       = func_get_arg(5);
            $this->metadata   = func_get_arg(6);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['groupNames'] = $this->groupNames;
        $json['roleRef']    = $this->roleRef;
        $json['subjects']   = $this->subjects;
        $json['userNames']  = $this->userNames;
        $json['apiVersion'] = $this->apiVersion;
        $json['kind']       = $this->kind;
        $json['metadata']   = $this->metadata;

        return $json;
    }
}
