<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * RollingDeploymentStrategyParams are the input to the Rolling deployment strategy.
 */
class V1RollingDeploymentStrategyParams implements JsonSerializable
{
    /**
     * IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.
     * @var integer|null $intervalSeconds public property
     */
    public $intervalSeconds;

    /**
     * MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up.
     * This cannot be 0 if MaxUnavailable is 0. By default, 25% is used.
     * Example: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.
     * @var string|null $maxSurge public property
     */
    public $maxSurge;

    /**
     * MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down.
     * This cannot be 0 if MaxSurge is 0. By default, 25% is used.
     * Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.
     * @var string|null $maxUnavailable public property
     */
    public $maxUnavailable;

    /**
     * Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.
     * @var V1LifecycleHook|null $post public property
     */
    public $post;

    /**
     * Pre is a lifecycle hook which is executed before the deployment process begins. All LifecycleHookFailurePolicy values are supported.
     * @var V1LifecycleHook|null $pre public property
     */
    public $pre;

    /**
     * TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.
     * @var integer|null $timeoutSeconds public property
     */
    public $timeoutSeconds;

    /**
     * UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.
     * @var integer|null $updatePeriodSeconds public property
     */
    public $updatePeriodSeconds;

    /**
     * Constructor to set initial or default values of member properties
     * @param integer         $intervalSeconds     Initialization value for $this->intervalSeconds
     * @param string          $maxSurge            Initialization value for $this->maxSurge
     * @param string          $maxUnavailable      Initialization value for $this->maxUnavailable
     * @param V1LifecycleHook $post                Initialization value for $this->post
     * @param V1LifecycleHook $pre                 Initialization value for $this->pre
     * @param integer         $timeoutSeconds      Initialization value for $this->timeoutSeconds
     * @param integer         $updatePeriodSeconds Initialization value for $this->updatePeriodSeconds
     */
    public function __construct()
    {
        if (7 == func_num_args()) {
            $this->intervalSeconds     = func_get_arg(0);
            $this->maxSurge            = func_get_arg(1);
            $this->maxUnavailable      = func_get_arg(2);
            $this->post                = func_get_arg(3);
            $this->pre                 = func_get_arg(4);
            $this->timeoutSeconds      = func_get_arg(5);
            $this->updatePeriodSeconds = func_get_arg(6);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['intervalSeconds']     = $this->intervalSeconds;
        $json['maxSurge']            = $this->maxSurge;
        $json['maxUnavailable']      = $this->maxUnavailable;
        $json['post']                = $this->post;
        $json['pre']                 = $this->pre;
        $json['timeoutSeconds']      = $this->timeoutSeconds;
        $json['updatePeriodSeconds'] = $this->updatePeriodSeconds;

        return $json;
    }
}
