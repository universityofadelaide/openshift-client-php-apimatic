<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for
 * provider-specific attributes
 */
class V1PersistentVolumeClaimSpec implements JsonSerializable
{
    /**
     * AccessModes contains the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
     * @var array|null $accessModes public property
     */
    public $accessModes;

    /**
     * Resources represents the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
     * @var V1ResourceRequirements|null $resources public property
     */
    public $resources;

    /**
     * A label query over volumes to consider for binding.
     * @var V1LabelSelector|null $selector public property
     */
    public $selector;

    /**
     * Name of the StorageClass required by the claim. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#class-1
     * @var string|null $storageClassName public property
     */
    public $storageClassName;

    /**
     * VolumeName is the binding reference to the PersistentVolume backing this claim.
     * @var string|null $volumeName public property
     */
    public $volumeName;

    /**
     * Constructor to set initial or default values of member properties
     * @param array                  $accessModes      Initialization value for $this->accessModes
     * @param V1ResourceRequirements $resources        Initialization value for $this->resources
     * @param V1LabelSelector        $selector         Initialization value for $this->selector
     * @param string                 $storageClassName Initialization value for $this->storageClassName
     * @param string                 $volumeName       Initialization value for $this->volumeName
     */
    public function __construct()
    {
        if (5 == func_num_args()) {
            $this->accessModes      = func_get_arg(0);
            $this->resources        = func_get_arg(1);
            $this->selector         = func_get_arg(2);
            $this->storageClassName = func_get_arg(3);
            $this->volumeName       = func_get_arg(4);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['accessModes']      = $this->accessModes;
        $json['resources']        = $this->resources;
        $json['selector']         = $this->selector;
        $json['storageClassName'] = $this->storageClassName;
        $json['volumeName']       = $this->volumeName;

        return $json;
    }
}
