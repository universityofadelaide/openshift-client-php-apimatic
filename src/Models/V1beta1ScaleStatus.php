<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * represents the current status of a scale subresource.
 */
class V1beta1ScaleStatus implements JsonSerializable
{
    /**
     * actual number of observed instances of the scaled object.
     * @required
     * @var integer $replicas public property
     */
    public $replicas;

    /**
     * label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
     * @var array|null $selector public property
     */
    public $selector;

    /**
     * label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
     * @var string|null $targetSelector public property
     */
    public $targetSelector;

    /**
     * Constructor to set initial or default values of member properties
     * @param integer $replicas       Initialization value for $this->replicas
     * @param array   $selector       Initialization value for $this->selector
     * @param string  $targetSelector Initialization value for $this->targetSelector
     */
    public function __construct()
    {
        if (3 == func_num_args()) {
            $this->replicas       = func_get_arg(0);
            $this->selector       = func_get_arg(1);
            $this->targetSelector = func_get_arg(2);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['replicas']       = $this->replicas;
        $json['selector']       = $this->selector;
        $json['targetSelector'] = $this->targetSelector;

        return $json;
    }
}
