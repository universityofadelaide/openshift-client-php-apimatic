<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * Pod Security Policy Spec defines the policy enforced.
 */
class V1beta1PodSecurityPolicySpec implements JsonSerializable
{
    /**
     * FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     * @required
     * @var V1beta1FSGroupStrategyOptions $fsGroup public property
     */
    public $fsGroup;

    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     * @required
     * @var V1beta1FSGroupStrategyOptions $runAsUser public property
     */
    public $runAsUser;

    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     * @required
     * @var V1beta1SELinuxStrategyOptions $seLinux public property
     */
    public $seLinux;

    /**
     * SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     * @required
     * @var V1beta1FSGroupStrategyOptions $supplementalGroups public property
     */
    public $supplementalGroups;

    /**
     * AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.
     * @var array|null $allowedCapabilities public property
     */
    public $allowedCapabilities;

    /**
     * DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
     * @var array|null $defaultAddCapabilities public property
     */
    public $defaultAddCapabilities;

    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     * @var bool|null $hostIPC public property
     */
    public $hostIPC;

    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     * @var bool|null $hostNetwork public property
     */
    public $hostNetwork;

    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     * @var bool|null $hostPID public property
     */
    public $hostPID;

    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     * @var V1beta1HostPortRange[]|null $hostPorts public property
     */
    public $hostPorts;

    /**
     * privileged determines if a pod can request to be run as privileged.
     * @var bool|null $privileged public property
     */
    public $privileged;

    /**
     * ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     * @var bool|null $readOnlyRootFilesystem public property
     */
    public $readOnlyRootFilesystem;

    /**
     * RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     * @var array|null $requiredDropCapabilities public property
     */
    public $requiredDropCapabilities;

    /**
     * volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.
     * @var array|null $volumes public property
     */
    public $volumes;

    /**
     * Constructor to set initial or default values of member properties
     * @param V1beta1FSGroupStrategyOptions $fsGroup                  Initialization value for $this->fsGroup
     * @param V1beta1FSGroupStrategyOptions $runAsUser                Initialization value for $this->runAsUser
     * @param V1beta1SELinuxStrategyOptions $seLinux                  Initialization value for $this->seLinux
     * @param V1beta1FSGroupStrategyOptions $supplementalGroups       Initialization value for $this-
     *                                                                  >supplementalGroups
     * @param array                         $allowedCapabilities      Initialization value for $this-
     *                                                                  >allowedCapabilities
     * @param array                         $defaultAddCapabilities   Initialization value for $this-
     *                                                                  >defaultAddCapabilities
     * @param bool                          $hostIPC                  Initialization value for $this->hostIPC
     * @param bool                          $hostNetwork              Initialization value for $this->hostNetwork
     * @param bool                          $hostPID                  Initialization value for $this->hostPID
     * @param array                         $hostPorts                Initialization value for $this->hostPorts
     * @param bool                          $privileged               Initialization value for $this->privileged
     * @param bool                          $readOnlyRootFilesystem   Initialization value for $this-
     *                                                                  >readOnlyRootFilesystem
     * @param array                         $requiredDropCapabilities Initialization value for $this-
     *                                                                  >requiredDropCapabilities
     * @param array                         $volumes                  Initialization value for $this->volumes
     */
    public function __construct()
    {
        if (14 == func_num_args()) {
            $this->fsGroup                  = func_get_arg(0);
            $this->runAsUser                = func_get_arg(1);
            $this->seLinux                  = func_get_arg(2);
            $this->supplementalGroups       = func_get_arg(3);
            $this->allowedCapabilities      = func_get_arg(4);
            $this->defaultAddCapabilities   = func_get_arg(5);
            $this->hostIPC                  = func_get_arg(6);
            $this->hostNetwork              = func_get_arg(7);
            $this->hostPID                  = func_get_arg(8);
            $this->hostPorts                = func_get_arg(9);
            $this->privileged               = func_get_arg(10);
            $this->readOnlyRootFilesystem   = func_get_arg(11);
            $this->requiredDropCapabilities = func_get_arg(12);
            $this->volumes                  = func_get_arg(13);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['fsGroup']                  = $this->fsGroup;
        $json['runAsUser']                = $this->runAsUser;
        $json['seLinux']                  = $this->seLinux;
        $json['supplementalGroups']       = $this->supplementalGroups;
        $json['allowedCapabilities']      = $this->allowedCapabilities;
        $json['defaultAddCapabilities']   = $this->defaultAddCapabilities;
        $json['hostIPC']                  = $this->hostIPC;
        $json['hostNetwork']              = $this->hostNetwork;
        $json['hostPID']                  = $this->hostPID;
        $json['hostPorts']                = $this->hostPorts;
        $json['privileged']               = $this->privileged;
        $json['readOnlyRootFilesystem']   = $this->readOnlyRootFilesystem;
        $json['requiredDropCapabilities'] = $this->requiredDropCapabilities;
        $json['volumes']                  = $this->volumes;

        return $json;
    }
}
