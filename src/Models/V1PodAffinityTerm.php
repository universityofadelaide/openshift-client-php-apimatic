<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s))
 * that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-
 * located is defined as running on a node whose value of the label with key <topologyKey> tches that
 * of any node on which a pod of the set of pods is running
 */
class V1PodAffinityTerm implements JsonSerializable
{
    /**
     * A label query over a set of resources, in this case pods.
     * @var V1LabelSelector|null $labelSelector public property
     */
    public $labelSelector;

    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
     * @var array|null $namespaces public property
     */
    public $namespaces;

    /**
     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as "all topologies" ("all topologies" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed.
     * @var string|null $topologyKey public property
     */
    public $topologyKey;

    /**
     * Constructor to set initial or default values of member properties
     * @param V1LabelSelector $labelSelector Initialization value for $this->labelSelector
     * @param array           $namespaces    Initialization value for $this->namespaces
     * @param string          $topologyKey   Initialization value for $this->topologyKey
     */
    public function __construct()
    {
        if (3 == func_num_args()) {
            $this->labelSelector = func_get_arg(0);
            $this->namespaces    = func_get_arg(1);
            $this->topologyKey   = func_get_arg(2);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['labelSelector'] = $this->labelSelector;
        $json['namespaces']    = $this->namespaces;
        $json['topologyKey']   = $this->topologyKey;

        return $json;
    }
}
