<?php
/*
 * OpenShiftAPIWithKubernetesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace OpenShiftAPIWithKubernetesLib\Models;

use JsonSerializable;

/**
 * SecurityContext holds security configuration that will be applied to a container. Some fields are
 * present in both SecurityContext and PodSecurityContext.  When both are set, the values in
 * SecurityContext take precedence.
 */
class V1SecurityContext implements JsonSerializable
{
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     * @var V1Capabilities|null $capabilities public property
     */
    public $capabilities;

    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     * @var bool|null $privileged public property
     */
    public $privileged;

    /**
     * Whether this container has a read-only root filesystem. Default is false.
     * @var bool|null $readOnlyRootFilesystem public property
     */
    public $readOnlyRootFilesystem;

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @var bool|null $runAsNonRoot public property
     */
    public $runAsNonRoot;

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @var integer|null $runAsUser public property
     */
    public $runAsUser;

    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @var V1SELinuxOptions|null $seLinuxOptions public property
     */
    public $seLinuxOptions;

    /**
     * Constructor to set initial or default values of member properties
     * @param V1Capabilities   $capabilities           Initialization value for $this->capabilities
     * @param bool             $privileged             Initialization value for $this->privileged
     * @param bool             $readOnlyRootFilesystem Initialization value for $this->readOnlyRootFilesystem
     * @param bool             $runAsNonRoot           Initialization value for $this->runAsNonRoot
     * @param integer          $runAsUser              Initialization value for $this->runAsUser
     * @param V1SELinuxOptions $seLinuxOptions         Initialization value for $this->seLinuxOptions
     */
    public function __construct()
    {
        if (6 == func_num_args()) {
            $this->capabilities           = func_get_arg(0);
            $this->privileged             = func_get_arg(1);
            $this->readOnlyRootFilesystem = func_get_arg(2);
            $this->runAsNonRoot           = func_get_arg(3);
            $this->runAsUser              = func_get_arg(4);
            $this->seLinuxOptions         = func_get_arg(5);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['capabilities']           = $this->capabilities;
        $json['privileged']             = $this->privileged;
        $json['readOnlyRootFilesystem'] = $this->readOnlyRootFilesystem;
        $json['runAsNonRoot']           = $this->runAsNonRoot;
        $json['runAsUser']              = $this->runAsUser;
        $json['seLinuxOptions']         = $this->seLinuxOptions;

        return $json;
    }
}
